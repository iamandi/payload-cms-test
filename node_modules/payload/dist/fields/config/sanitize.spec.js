"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sanitize_1 = __importDefault(require("./sanitize"));
const errors_1 = require("../../errors");
describe('sanitizeFields', () => {
    it('should throw on missing type field', () => {
        const fields = [{
                label: 'some-collection',
                name: 'Some Collection',
            }];
        expect(() => {
            sanitize_1.default(fields, []);
        }).toThrow(errors_1.MissingFieldType);
    });
    describe('relationships', () => {
        it('should not throw on valid relationship', () => {
            const validRelationships = ['some-collection'];
            const fields = [{
                    type: 'relationship',
                    label: 'my-relationship',
                    name: 'My Relationship',
                    relationTo: 'some-collection',
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).not.toThrow();
        });
        it('should not throw on valid relationship - multiple', () => {
            const validRelationships = ['some-collection', 'another-collection'];
            const fields = [{
                    type: 'relationship',
                    label: 'my-relationship',
                    name: 'My Relationship',
                    relationTo: ['some-collection', 'another-collection'],
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).not.toThrow();
        });
        it('should not throw on valid relationship inside blocks', () => {
            const validRelationships = ['some-collection'];
            const fields = [{
                    name: 'layout',
                    label: 'Layout Blocks',
                    labels: {
                        singular: 'Block',
                    },
                    type: 'blocks',
                    blocks: [{
                            fields: [{
                                    type: 'relationship',
                                    label: 'my-relationship',
                                    name: 'My Relationship',
                                    relationTo: 'some-collection',
                                }],
                        }],
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).not.toThrow();
        });
        it('should throw on invalid relationship', () => {
            const validRelationships = ['some-collection'];
            const fields = [{
                    type: 'relationship',
                    label: 'my-relationship',
                    name: 'My Relationship',
                    relationTo: 'not-valid',
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).toThrow(errors_1.InvalidFieldRelationship);
        });
        it('should throw on invalid relationship - multiple', () => {
            const validRelationships = ['some-collection', 'another-collection'];
            const fields = [{
                    type: 'relationship',
                    label: 'my-relationship',
                    name: 'My Relationship',
                    relationTo: ['some-collection', 'not-valid'],
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).toThrow(errors_1.InvalidFieldRelationship);
        });
        it('should throw on invalid relationship inside blocks', () => {
            const validRelationships = ['some-collection'];
            const fields = [{
                    name: 'layout',
                    label: 'Layout Blocks',
                    labels: {
                        singular: 'Block',
                    },
                    type: 'blocks',
                    blocks: [{
                            fields: [{
                                    type: 'relationship',
                                    label: 'my-relationship',
                                    name: 'My Relationship',
                                    relationTo: 'not-valid',
                                }],
                        }],
                }];
            expect(() => {
                sanitize_1.default(fields, validRelationships);
            }).toThrow(errors_1.InvalidFieldRelationship);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWVsZHMvY29uZmlnL3Nhbml0aXplLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBd0M7QUFDeEMseUNBQTBFO0FBRTFFLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxNQUFNLE1BQU0sR0FBRyxDQUFDO2dCQUNkLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLElBQUksRUFBRSxpQkFBaUI7YUFDeEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLGtCQUFjLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5QkFBZ0IsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDN0IsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtZQUNoRCxNQUFNLGtCQUFrQixHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMvQyxNQUFNLE1BQU0sR0FBRyxDQUFDO29CQUNkLElBQUksRUFBRSxjQUFjO29CQUNwQixLQUFLLEVBQUUsaUJBQWlCO29CQUN4QixJQUFJLEVBQUUsaUJBQWlCO29CQUN2QixVQUFVLEVBQUUsaUJBQWlCO2lCQUM5QixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsR0FBRyxFQUFFO2dCQUNWLGtCQUFjLENBQUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtZQUMzRCxN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