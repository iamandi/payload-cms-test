"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const sharp_1 = __importDefault(require("sharp"));
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const getImageSize_1 = __importDefault(require("./getImageSize"));
const fileExists_1 = __importDefault(require("./fileExists"));
function getOutputImage(sourceImage, size) {
    const extension = sourceImage.split('.').pop();
    const name = sanitize_filename_1.default(sourceImage.substr(0, sourceImage.lastIndexOf('.')) || sourceImage);
    return {
        name,
        extension,
        width: size.width,
        height: size.height,
    };
}
/**
 * @description
 * @param staticPath Path to save images
 * @param config Payload config
 * @param savedFilename
 * @param mimeType
 * @returns image sizes keyed to strings
 */
async function resizeAndSave(staticPath, config, savedFilename, mimeType) {
    const { imageSizes } = config.upload;
    const sourceImage = `${staticPath}/${savedFilename}`;
    const dimensions = await getImageSize_1.default(sourceImage);
    const sizes = imageSizes
        .filter((desiredSize) => desiredSize.width < dimensions.width)
        .map(async (desiredSize) => {
        const outputImage = getOutputImage(savedFilename, desiredSize);
        const imageNameWithDimensions = `${outputImage.name}-${outputImage.width}x${outputImage.height}.${outputImage.extension}`;
        const imagePath = `${staticPath}/${imageNameWithDimensions}`;
        const fileAlreadyExists = await fileExists_1.default(imagePath);
        if (fileAlreadyExists) {
            fs_1.default.unlinkSync(imagePath);
        }
        const output = await sharp_1.default(sourceImage)
            .resize(desiredSize.width, desiredSize.height, {
            position: desiredSize.crop || 'centre',
        })
            .toFile(imagePath);
        return {
            ...desiredSize,
            filename: imageNameWithDimensions,
            filesize: output.size,
            mimeType,
        };
    });
    const savedSizes = await Promise.all(sizes);
    return savedSizes.reduce((results, size) => ({
        ...results,
        [size.name]: {
            width: size.width,
            height: size.height,
            filename: size.filename,
            mimeType: size.mimeType,
            filesize: size.filesize,
        },
    }), {});
}
exports.default = resizeAndSave;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VSZXNpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VwbG9hZHMvaW1hZ2VSZXNpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGtEQUEwQjtBQUMxQiwwRUFBeUM7QUFDekMsa0VBQTBDO0FBQzFDLDhEQUFzQztBQUl0QyxTQUFTLGNBQWMsQ0FBQyxXQUFtQixFQUFFLElBQWU7SUFDMUQsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMvQyxNQUFNLElBQUksR0FBRywyQkFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQztJQUUxRixPQUFPO1FBQ0wsSUFBSTtRQUNKLFNBQVM7UUFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7UUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0tBQ3BCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNZLEtBQUssVUFBVSxhQUFhLENBQ3pDLFVBQWtCLEVBQ2xCLE1BQXdCLEVBQ3hCLGFBQXFCLEVBQ3JCLFFBQWdCO0lBRWhCLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBRXJDLE1BQU0sV0FBVyxHQUFHLEdBQUcsVUFBVSxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBRXJELE1BQU0sVUFBVSxHQUFHLE1BQU0sc0JBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVuRCxNQUFNLEtBQUssR0FBRyxVQUFVO1NBQ3JCLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1NBQzdELEdBQUcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUU7UUFDekIsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMvRCxNQUFNLHVCQUF1QixHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzFILE1BQU0sU0FBUyxHQUFHLEdBQUcsVUFBVSxJQUFJLHVCQUF1QixFQUFFLENBQUM7UUFDN0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLG9CQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEQsSUFBSSxpQkFBaUIsRUFBRTtZQUNyQixZQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzFCO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFLLENBQUMsV0FBVyxDQUFDO2FBQ3BDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsUUFBUSxFQUFFLFdBQVcsQ0FBQyxJQUFJLElBQUksUUFBUTtTQUN2QyxDQUFDO2FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXJCLE9BQU87WUFDTCxHQUFHLFdBQVc7WUFDZCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSTtZQUNyQixRQUFRO1NBQ1QsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUwsTUFBTSxVQUFVLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0MsR0FBRyxPQUFPO1FBQ1YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCO0tBQ0YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1YsQ0FBQztBQWxERCxnQ0FrREMifQ==