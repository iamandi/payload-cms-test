/// <reference types="mongoose-paginate-v2" />
/// <reference types="passport-local-mongoose" />
/// <reference types="react" />
import { DeepRequired } from 'ts-essentials';
import { PaginateModel, PassportLocalModel } from 'mongoose';
import { Access } from '../../config/types';
import { Field } from '../../fields/config/types';
import { Document, PayloadMongooseDocument } from '../../types';
import { PayloadRequest } from '../../express/types';
import { IncomingAuthType, Auth } from '../../auth/types';
import { IncomingUploadType, Upload } from '../../uploads/types';
export interface CollectionModel extends PaginateModel<PayloadMongooseDocument>, PassportLocalModel<PayloadMongooseDocument> {
    buildQuery: (query: unknown, locale?: string) => Record<string, unknown>;
}
export interface AuthCollectionModel extends CollectionModel {
    resetPasswordToken: string;
    resetPasswordExpiration: Date;
}
export declare type HookOperationType = 'create' | 'read' | 'update' | 'delete' | 'refresh' | 'login' | 'forgotPassword';
export declare type BeforeOperationHook = (args?: {
    args?: any;
    operation: HookOperationType;
}) => any;
export declare type BeforeValidateHook = (args?: {
    data?: any;
    req?: PayloadRequest;
    operation: 'create' | 'update';
    originalDoc?: any;
}) => any;
export declare type BeforeChangeHook = (args?: {
    data: any;
    req: PayloadRequest;
    operation: 'create' | 'update';
    originalDoc?: any;
}) => any;
export declare type AfterChangeHook = (args?: {
    doc: any;
    req: PayloadRequest;
    operation: 'create' | 'update';
}) => any;
export declare type BeforeReadHook = (args?: {
    doc: any;
    req: PayloadRequest;
    query: {
        [key: string]: any;
    };
}) => any;
export declare type AfterReadHook = (args?: {
    doc: any;
    req: PayloadRequest;
    query?: {
        [key: string]: any;
    };
}) => any;
export declare type BeforeDeleteHook = (args?: {
    req: PayloadRequest;
    id: string;
}) => any;
export declare type AfterDeleteHook = (args?: {
    req: PayloadRequest;
    id: string;
    doc: any;
}) => any;
export declare type AfterErrorHook = (err: Error, res: unknown) => {
    response: any;
    status: number;
} | void;
export declare type BeforeLoginHook = (args?: {
    req: PayloadRequest;
}) => any;
export declare type AfterLoginHook = (args?: {
    req: PayloadRequest;
    doc: any;
    token: string;
}) => any;
export declare type AfterForgotPasswordHook = (args?: {
    args?: any;
}) => any;
export declare type PayloadCollectionConfig = {
    slug: string;
    labels?: {
        singular?: string;
        plural?: string;
    };
    fields: Field[];
    admin?: {
        useAsTitle?: string;
        defaultColumns?: string[];
        disableDuplicate?: boolean;
        components?: {
            views?: {
                Edit?: React.ComponentType;
                List?: React.ComponentType;
            };
        };
        enableRichTextRelationship?: boolean;
        preview?: (doc: Document, token: string) => string;
    };
    hooks?: {
        beforeOperation?: BeforeOperationHook[];
        beforeValidate?: BeforeValidateHook[];
        beforeChange?: BeforeChangeHook[];
        afterChange?: AfterChangeHook[];
        beforeRead?: BeforeReadHook[];
        afterRead?: AfterReadHook[];
        beforeDelete?: BeforeDeleteHook[];
        afterDelete?: AfterDeleteHook[];
        afterError?: AfterErrorHook;
        beforeLogin?: BeforeLoginHook[];
        afterLogin?: AfterLoginHook[];
        afterForgotPassword?: AfterForgotPasswordHook[];
    };
    access?: {
        create?: Access;
        read?: Access;
        update?: Access;
        delete?: Access;
        admin?: Access;
        unlock?: Access;
    };
    auth?: IncomingAuthType | boolean;
    upload?: IncomingUploadType | boolean;
    timestamps?: boolean;
};
export interface CollectionConfig extends Omit<DeepRequired<PayloadCollectionConfig>, 'auth' | 'upload'> {
    auth: Auth;
    upload: Upload;
}
export declare type Collection = {
    Model: CollectionModel;
    config: CollectionConfig;
};
export declare type AuthCollection = {
    Model: AuthCollectionModel;
    config: CollectionConfig;
};
export declare type PaginatedDocs = {
    docs: any[];
    totalDocs: number;
    limit: number;
    totalPages: number;
    page: number;
    pagingCounter: number;
    hasPrevPage: boolean;
    hasNextPage: boolean;
    prevPage: number | null;
    nextPage: number | null;
};
