import React, { createContext, useEffect, useContext, useState } from 'react';
import RenderCustomComponent from '../../utilities/RenderCustomComponent';
import useIntersect from '../../../hooks/useIntersect';
const baseClass = 'render-fields';
const intersectionObserverOptions = {
    rootMargin: '1000px',
};
const RenderedFieldContext = createContext({});
export const useRenderedFields = () => useContext(RenderedFieldContext);
const RenderFields = (props) => {
    const { fieldSchema, fieldTypes, filter, permissions, readOnly: readOnlyOverride, operation: operationFromProps, className, } = props;
    const [hasRendered, setHasRendered] = useState(false);
    const [intersectionRef, entry] = useIntersect(intersectionObserverOptions);
    const isIntersecting = Boolean(entry?.isIntersecting);
    const isAboveViewport = entry?.boundingClientRect?.top < 0;
    const shouldRender = isIntersecting || isAboveViewport;
    const { operation: operationFromContext } = useRenderedFields();
    const operation = operationFromProps || operationFromContext;
    const [contextValue, setContextValue] = useState({
        operation,
    });
    useEffect(() => {
        setContextValue({
            operation,
        });
    }, [operation]);
    useEffect(() => {
        if (shouldRender && !hasRendered) {
            setHasRendered(true);
        }
    }, [shouldRender, hasRendered]);
    const classes = [
        baseClass,
        className,
    ].filter(Boolean).join(' ');
    if (fieldSchema) {
        return (React.createElement("div", { ref: intersectionRef, className: classes }, hasRendered && (React.createElement(RenderedFieldContext.Provider, { value: contextValue }, fieldSchema.map((field, i) => {
            if (!field?.hidden && field?.admin?.disabled !== true) {
                if ((filter && typeof filter === 'function' && filter(field)) || !filter) {
                    const FieldComponent = field?.admin?.hidden ? fieldTypes.hidden : fieldTypes[field.type];
                    const fieldPermissions = field?.name ? permissions?.[field.name] : permissions;
                    let { admin: { readOnly } = {} } = field;
                    if (readOnlyOverride)
                        readOnly = true;
                    if (operation === 'create')
                        readOnly = false;
                    if (permissions?.[field?.name]?.read?.permission !== false) {
                        if (permissions?.[field?.name]?.[operation]?.permission === false) {
                            readOnly = true;
                        }
                        if (FieldComponent) {
                            return (React.createElement(RenderCustomComponent, { key: i, CustomComponent: field?.admin?.components?.Field, DefaultComponent: FieldComponent, componentProps: {
                                    ...field,
                                    path: field.path || field.name,
                                    fieldTypes,
                                    admin: {
                                        ...(field.admin || {}),
                                        readOnly,
                                    },
                                    permissions: fieldPermissions,
                                } }));
                        }
                        return (React.createElement("div", { className: "missing-field", key: i },
                            "No matched field found for",
                            ' ',
                            "\"",
                            field.label,
                            "\""));
                    }
                }
                return null;
            }
            return null;
        })))));
    }
    return null;
};
export default RenderFields;
