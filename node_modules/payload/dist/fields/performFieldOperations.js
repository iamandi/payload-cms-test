"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const sanitizeFallbackLocale_1 = __importDefault(require("../localization/sanitizeFallbackLocale"));
const traverseFields_1 = __importDefault(require("./traverseFields"));
async function performFieldOperations(entityConfig, args) {
    const { data: fullData, originalDoc: fullOriginalDoc, operation, hook, req, id, req: { payloadAPI, locale, }, overrideAccess, reduceLocales, showHiddenFields = false, } = args;
    const fallbackLocale = sanitizeFallbackLocale_1.default(req.fallbackLocale);
    let depth = 0;
    if (payloadAPI === 'REST' || payloadAPI === 'local') {
        depth = (args.depth || args.depth === 0) ? parseInt(String(args.depth), 10) : this.config.defaultDepth;
        if (depth > this.config.maxDepth)
            depth = this.config.maxDepth;
    }
    const currentDepth = args.currentDepth || 1;
    // Maintain a top-level list of promises
    // so that all async field access / validations / hooks
    // can run in parallel
    const validationPromises = [];
    const accessPromises = [];
    const relationshipPopulations = [];
    const hookPromises = [];
    const errors = [];
    // //////////////////////////////////////////
    // Entry point for field validation
    // //////////////////////////////////////////
    traverseFields_1.default({
        fields: entityConfig.fields,
        data: fullData,
        originalDoc: fullOriginalDoc,
        path: '',
        reduceLocales,
        locale,
        fallbackLocale,
        accessPromises,
        operation,
        overrideAccess,
        req,
        id,
        relationshipPopulations,
        depth,
        currentDepth,
        hook,
        hookPromises,
        fullOriginalDoc,
        fullData,
        validationPromises,
        errors,
        payload: this,
        showHiddenFields,
    });
    await Promise.all(hookPromises);
    validationPromises.forEach((promise) => promise());
    await Promise.all(validationPromises);
    if (errors.length > 0) {
        throw new errors_1.ValidationError(errors);
    }
    await Promise.all(accessPromises);
    const relationshipPopulationPromises = relationshipPopulations.map((population) => population());
    await Promise.all(relationshipPopulationPromises);
    return fullData;
}
exports.default = performFieldOperations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybUZpZWxkT3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWVsZHMvcGVyZm9ybUZpZWxkT3BlcmF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNDQUE0QztBQUM1QyxvR0FBNEU7QUFDNUUsc0VBQThDO0FBcUIvQixLQUFLLFVBQVUsc0JBQXNCLENBQUMsWUFBNkMsRUFBRSxJQUFlO0lBQ2pILE1BQU0sRUFDSixJQUFJLEVBQUUsUUFBUSxFQUNkLFdBQVcsRUFBRSxlQUFlLEVBQzVCLFNBQVMsRUFDVCxJQUFJLEVBQ0osR0FBRyxFQUNILEVBQUUsRUFDRixHQUFHLEVBQUUsRUFDSCxVQUFVLEVBQ1YsTUFBTSxHQUNQLEVBQ0QsY0FBYyxFQUNkLGFBQWEsRUFDYixnQkFBZ0IsR0FBRyxLQUFLLEdBQ3pCLEdBQUcsSUFBSSxDQUFDO0lBRVQsTUFBTSxjQUFjLEdBQUcsZ0NBQXNCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRWxFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUVkLElBQUksVUFBVSxLQUFLLE1BQU0sSUFBSSxVQUFVLEtBQUssT0FBTyxFQUFFO1FBQ25ELEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1FBRXZHLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtZQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNoRTtJQUVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO0lBRTVDLHdDQUF3QztJQUN4Qyx1REFBdUQ7SUFDdkQsc0JBQXNCO0lBQ3RCLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUMxQixNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztJQUNuQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsTUFBTSxNQUFNLEdBQXlDLEVBQUUsQ0FBQztJQUV4RCw2Q0FBNkM7SUFDN0MsbUNBQW1DO0lBQ25DLDZDQUE2QztJQUU3Qyx3QkFBYyxDQUFDO1FBQ2IsTUFBTSxFQUFFLFlBQVksQ0FBQyxNQUFNO1FBQzNCLElBQUksRUFBRSxRQUFRO1FBQ2QsV0FBVyxFQUFFLGVBQWU7UUFDNUIsSUFBSSxFQUFFLEVBQUU7UUFDUixhQUFhO1FBQ2IsTUFBTTtRQUNOLGNBQWM7UUFDZCxjQUFjO1FBQ2QsU0FBUztRQUNULGNBQWM7UUFDZCxHQUFHO1FBQ0gsRUFBRTtRQUNGLHVCQUF1QjtRQUN2QixLQUFLO1FBQ0wsWUFBWTtRQUNaLElBQUk7UUFDSixZQUFZO1FBQ1osZUFBZTtRQUNmLFFBQVE7UUFDUixrQkFBa0I7UUFDbEIsTUFBTTtRQUNOLE9BQU8sRUFBRSxJQUFJO1FBQ2IsZ0JBQWdCO0tBQ2pCLENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVoQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFbkQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFdEMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQixNQUFNLElBQUksd0JBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNuQztJQUVELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVsQyxNQUFNLDhCQUE4QixHQUFHLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUVqRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUVsRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBckZELHlDQXFGQyJ9