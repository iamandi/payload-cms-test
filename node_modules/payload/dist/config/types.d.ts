/// <reference types="react" />
import { Express } from 'express';
import { DeepRequired } from 'ts-essentials';
import { Transporter } from 'nodemailer';
import { Configuration } from 'webpack';
import SMTPConnection from 'nodemailer/lib/smtp-connection';
import GraphQL from 'graphql';
import { Payload } from '..';
import { AfterErrorHook, PayloadCollectionConfig, CollectionConfig } from '../collections/config/types';
import { PayloadGlobalConfig, GlobalConfig } from '../globals/config/types';
import { PayloadRequest } from '../express/types';
import InitializeGraphQL from '../graphql';
import { Where } from '../types';
declare type Email = {
    fromName: string;
    fromAddress: string;
};
export declare type EmailTransport = Email & {
    transport: Transporter;
    transportOptions?: SMTPConnection.Options;
};
export declare type EmailTransportOptions = Email & {
    transport?: Transporter;
    transportOptions: SMTPConnection.Options;
};
export declare type EmailOptions = EmailTransport | EmailTransportOptions | Email;
/**
 * type guard for EmailOptions
 * @param emailConfig
 */
export declare function hasTransport(emailConfig: EmailOptions): emailConfig is EmailTransport;
/**
 * type guard for EmailOptions
 * @param emailConfig
 */
export declare function hasTransportOptions(emailConfig: EmailOptions): emailConfig is EmailTransportOptions;
export declare type InitOptions = {
    express?: Express;
    mongoURL: string;
    secret: string;
    license?: string;
    email?: EmailOptions;
    local?: boolean;
    onInit?: (payload: Payload) => void;
};
export declare type AccessResult = boolean | Where;
export declare type Access = (args?: any) => AccessResult;
export declare type PayloadConfig = {
    admin?: {
        user?: string;
        meta?: {
            titleSuffix?: string;
            ogImage?: string;
            favicon?: string;
        };
        disable?: boolean;
        indexHTML?: string;
        css?: string;
        scss?: string;
        components?: {
            Nav?: React.ComponentType;
            graphics?: {
                Icon?: React.ComponentType;
                Logo?: React.ComponentType;
            };
            views?: {
                Account?: React.ComponentType;
                Dashboard?: React.ComponentType;
            };
        };
        webpack?: (config: Configuration) => Configuration;
    };
    collections?: PayloadCollectionConfig[];
    globals?: PayloadGlobalConfig[];
    serverURL: string;
    cookiePrefix?: string;
    csrf?: string[];
    cors?: string[] | '*';
    routes?: {
        api?: string;
        admin?: string;
        graphQL?: string;
        graphQLPlayground?: string;
    };
    debug?: boolean;
    express?: {
        json: {
            limit?: number;
        };
        compression?: {
            [key: string]: unknown;
        };
        middleware?: any[];
    };
    defaultDepth?: number;
    maxDepth?: number;
    rateLimit?: {
        window?: number;
        max?: number;
        trustProxy?: boolean;
        skip?: (req: PayloadRequest) => boolean;
    };
    upload?: {
        limits?: {
            fileSize?: number;
        };
    };
    localization?: {
        locales: string[];
        defaultLocale: string;
        fallback?: boolean;
    };
    graphQL?: {
        mutations?: {
            [key: string]: unknown;
        } | ((graphQL: typeof GraphQL, payload: InitializeGraphQL) => any);
        queries?: {
            [key: string]: unknown;
        } | ((graphQL: typeof GraphQL, payload: InitializeGraphQL) => any);
        maxComplexity?: number;
        disablePlaygroundInProduction?: boolean;
        disable?: boolean;
    };
    components?: {
        [key: string]: JSX.Element | (() => JSX.Element);
    };
    paths?: {
        [key: string]: string;
    };
    hooks?: {
        afterError?: AfterErrorHook;
    };
};
export declare type Config = Omit<DeepRequired<PayloadConfig>, 'collections'> & {
    collections: CollectionConfig[];
    globals: GlobalConfig[];
};
export {};
