"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const defaultUser_1 = __importDefault(require("../auth/defaultUser"));
const sanitize_1 = __importDefault(require("../collections/config/sanitize"));
const errors_1 = require("../errors");
const sanitize_2 = __importDefault(require("../globals/config/sanitize"));
const checkDuplicateCollections_1 = __importDefault(require("../utilities/checkDuplicateCollections"));
const defaults_1 = require("./defaults");
const sanitizeConfig = (config) => {
    const sanitizedConfig = deepmerge_1.default(defaults_1.defaults, config);
    if (!sanitizedConfig.admin.user) {
        sanitizedConfig.admin.user = 'users';
        const sanitizedDefaultUser = sanitize_1.default(sanitizedConfig.collections, defaultUser_1.default);
        sanitizedConfig.collections.push(sanitizedDefaultUser);
    }
    else if (!sanitizedConfig.collections.find((c) => c.slug === sanitizedConfig.admin.user)) {
        throw new errors_1.InvalidConfiguration(`${sanitizedConfig.admin.user} is not a valid admin user collection`);
    }
    sanitizedConfig.collections = sanitizedConfig.collections.map((collection) => sanitize_1.default(sanitizedConfig.collections, collection));
    checkDuplicateCollections_1.default(sanitizedConfig.collections);
    if (sanitizedConfig.globals.length > 0) {
        sanitizedConfig.globals = sanitize_2.default(sanitizedConfig.collections, sanitizedConfig.globals);
    }
    sanitizedConfig.csrf = [
        ...sanitizedConfig.csrf,
        config.serverURL,
    ];
    return sanitizedConfig;
};
exports.default = sanitizeConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3Nhbml0aXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQThCO0FBRTlCLHNFQUE4QztBQUM5Qyw4RUFBZ0U7QUFDaEUsc0NBQWlEO0FBQ2pELDBFQUF5RDtBQUN6RCx1R0FBK0U7QUFDL0UseUNBQXNDO0FBRXRDLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBcUIsRUFBVSxFQUFFO0lBQ3ZELE1BQU0sZUFBZSxHQUFHLG1CQUFLLENBQUMsbUJBQVEsRUFBRSxNQUFNLENBQWtCLENBQUM7SUFFakUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQy9CLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNyQyxNQUFNLG9CQUFvQixHQUFHLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUscUJBQVcsQ0FBQyxDQUFDO1FBQzFGLGVBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDeEQ7U0FBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxRixNQUFNLElBQUksNkJBQW9CLENBQUMsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksdUNBQXVDLENBQUMsQ0FBQztLQUN0RztJQUVELGVBQWUsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzSSxtQ0FBeUIsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdkQsSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdEMsZUFBZSxDQUFDLE9BQU8sR0FBRyxrQkFBZSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2pHO0lBRUQsZUFBZSxDQUFDLElBQUksR0FBRztRQUNyQixHQUFHLGVBQWUsQ0FBQyxJQUFJO1FBQ3ZCLE1BQU0sQ0FBQyxTQUFTO0tBQ2pCLENBQUM7SUFFRixPQUFPLGVBQXlCLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsY0FBYyxDQUFDIn0=