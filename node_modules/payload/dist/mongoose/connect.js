"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const mongoose_1 = __importDefault(require("mongoose"));
const logger_1 = __importDefault(require("../utilities/logger"));
const logger = logger_1.default();
const connectMongoose = async (url) => {
    let urlToConnect = url;
    let successfulConnectionMessage = 'Connected to Mongo server successfully!';
    if (process.env.NODE_ENV === 'test') {
        // eslint-disable-next-line global-require
        const { MongoMemoryServer } = require('mongodb-memory-server');
        const mongod = new MongoMemoryServer({
            instance: {
                port: 27018,
                dbName: 'payloadmemory',
            },
        });
        urlToConnect = await mongod.getUri();
        successfulConnectionMessage = 'Connected to in-memory Mongo server successfully!';
    }
    try {
        await mongoose_1.default.connect(urlToConnect, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            useCreateIndex: true,
            autoIndex: false,
        });
        logger.info(successfulConnectionMessage);
    }
    catch (err) {
        logger.error('Error: cannot connect to MongoDB. Details: ', err);
        process.exit(1);
    }
};
exports.default = connectMongoose;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb25nb29zZS9jb25uZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQStCO0FBQy9CLHdEQUFnQztBQUNoQyxpRUFBeUM7QUFFekMsTUFBTSxNQUFNLEdBQUcsZ0JBQU0sRUFBRSxDQUFDO0FBRXhCLE1BQU0sZUFBZSxHQUFHLEtBQUssRUFBRSxHQUFXLEVBQWlCLEVBQUU7SUFDM0QsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQ3ZCLElBQUksMkJBQTJCLEdBQUcseUNBQXlDLENBQUM7SUFFNUUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7UUFDbkMsMENBQTBDO1FBQzFDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUM7WUFDbkMsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxLQUFLO2dCQUNYLE1BQU0sRUFBRSxlQUFlO2FBQ3hCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JDLDJCQUEyQixHQUFHLG1EQUFtRCxDQUFDO0tBQ25GO0lBRUQsSUFBSTtRQUNGLE1BQU0sa0JBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ25DLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQzFDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUM7QUFFRixrQkFBZSxlQUFlLENBQUMifQ==