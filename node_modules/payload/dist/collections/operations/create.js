"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp_1 = __importDefault(require("mkdirp"));
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const removeInternalFields_1 = __importDefault(require("../../utilities/removeInternalFields"));
const errors_1 = require("../../errors");
const imageResizer_1 = __importDefault(require("../../uploads/imageResizer"));
const getSafeFilename_1 = __importDefault(require("../../uploads/getSafeFilename"));
const getImageSize_1 = __importDefault(require("../../uploads/getImageSize"));
const isImage_1 = __importDefault(require("../../uploads/isImage"));
const sendVerificationEmail_1 = __importDefault(require("../../auth/sendVerificationEmail"));
async function create(incomingArgs) {
    const { performFieldOperations, config, emailOptions } = this;
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {
        await priorHook;
        args = (await hook({
            args,
            operation: 'create',
        })) || args;
    }, Promise.resolve());
    const { collection: { Model, config: collectionConfig, }, req, req: { locale, fallbackLocale, }, disableVerificationEmail, depth, overrideAccess, showHiddenFields, } = args;
    let { data } = args;
    // /////////////////////////////////////
    // Access
    // /////////////////////////////////////
    if (!overrideAccess) {
        await executeAccess_1.default({ req }, collectionConfig.access.create);
    }
    // /////////////////////////////////////
    // beforeValidate - Fields
    // /////////////////////////////////////
    data = await this.performFieldOperations(collectionConfig, {
        data,
        req,
        hook: 'beforeValidate',
        operation: 'create',
        overrideAccess,
    });
    // /////////////////////////////////////
    // beforeValidate - Collections
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'create',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Fields
    // /////////////////////////////////////
    data = await performFieldOperations(collectionConfig, {
        data,
        hook: 'beforeChange',
        operation: 'create',
        req,
        overrideAccess,
    });
    // /////////////////////////////////////
    // beforeChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'create',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Upload and resize potential files
    // /////////////////////////////////////
    if (collectionConfig.upload) {
        const fileData = {};
        const { staticDir, imageSizes } = collectionConfig.upload;
        const file = ((req.files && req.files.file) ? req.files.file : req.file);
        if (!file) {
            throw new errors_1.MissingFile();
        }
        let staticPath = staticDir;
        if (staticDir.indexOf('/') !== 0) {
            staticPath = path_1.default.join(config.paths.configDir, staticDir);
        }
        mkdirp_1.default.sync(staticPath);
        const fsSafeName = await getSafeFilename_1.default(staticPath, file.name);
        try {
            await file.mv(`${staticPath}/${fsSafeName}`);
            if (isImage_1.default(file.mimetype)) {
                const dimensions = await getImageSize_1.default(`${staticPath}/${fsSafeName}`);
                fileData.width = dimensions.width;
                fileData.height = dimensions.height;
                if (Array.isArray(imageSizes) && file.mimetype !== 'image/svg+xml') {
                    fileData.sizes = await imageResizer_1.default(staticPath, collectionConfig, fsSafeName, fileData.mimeType);
                }
            }
        }
        catch (err) {
            console.error(err);
            throw new errors_1.FileUploadError();
        }
        fileData.filename = fsSafeName;
        fileData.filesize = file.size;
        fileData.mimeType = file.mimetype;
        data = {
            ...data,
            ...fileData,
        };
    }
    // /////////////////////////////////////
    // Create
    // /////////////////////////////////////
    let doc = new Model();
    if (locale && doc.setLocale) {
        doc.setLocale(locale, fallbackLocale);
    }
    if (collectionConfig.auth) {
        if (data.email) {
            data.email = data.email.toLowerCase();
        }
        if (collectionConfig.auth.verify) {
            data._verified = false;
            data._verificationToken = crypto_1.default.randomBytes(20).toString('hex');
        }
    }
    Object.assign(doc, data);
    if (collectionConfig.auth) {
        doc = await Model.register(doc, data.password);
    }
    else {
        await doc.save();
    }
    let result = doc.toJSON({ virtuals: true });
    result = removeInternalFields_1.default(result);
    result = JSON.stringify(result);
    result = JSON.parse(result);
    // /////////////////////////////////////
    // afterChange - Fields
    // /////////////////////////////////////
    result = await performFieldOperations(collectionConfig, {
        data: result,
        hook: 'afterChange',
        operation: 'create',
        req,
        depth,
        overrideAccess,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            doc: result,
            req: args.req,
            operation: 'create',
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Send verification email if applicable
    // /////////////////////////////////////
    if (collectionConfig.auth && collectionConfig.auth.verify) {
        sendVerificationEmail_1.default({
            emailOptions,
            config: this.config,
            sendEmail: this.sendEmail,
            collection: { config: collectionConfig, Model },
            user: result,
            token: data._verificationToken,
            req,
            disableEmail: disableVerificationEmail,
        });
    }
    // /////////////////////////////////////
    // afterRead - Fields
    // /////////////////////////////////////
    result = await this.performFieldOperations(collectionConfig, {
        depth,
        req,
        data: result,
        hook: 'afterRead',
        operation: 'create',
        overrideAccess,
        reduceLocales: false,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterRead - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            req,
            doc: result,
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Return results
    // /////////////////////////////////////
    return result;
}
exports.default = create;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbGxlY3Rpb25zL29wZXJhdGlvbnMvY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTRCO0FBQzVCLGdEQUF3QjtBQUN4QixvREFBNEI7QUFHNUIsNkVBQXFEO0FBQ3JELGdHQUF3RTtBQUV4RSx5Q0FBNEQ7QUFDNUQsOEVBQXVEO0FBQ3ZELG9GQUE0RDtBQUM1RCw4RUFBc0Q7QUFDdEQsb0VBQTRDO0FBRzVDLDZGQUFxRTtBQWdCckUsS0FBSyxVQUFVLE1BQU0sQ0FBZ0IsWUFBdUI7SUFDMUQsTUFBTSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFOUQsSUFBSSxJQUFJLEdBQUcsWUFBWSxDQUFDO0lBRXhCLHdDQUF3QztJQUN4QywrQkFBK0I7SUFDL0Isd0NBQXdDO0lBRXhDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQThDLEVBQUUsSUFBeUIsRUFBRSxFQUFFO1FBQzVJLE1BQU0sU0FBUyxDQUFDO1FBRWhCLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQ2pCLElBQUk7WUFDSixTQUFTLEVBQUUsUUFBUTtTQUNwQixDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDZCxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFdEIsTUFBTSxFQUNKLFVBQVUsRUFBRSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQUUsZ0JBQWdCLEdBQ3pCLEVBQ0QsR0FBRyxFQUNILEdBQUcsRUFBRSxFQUNILE1BQU0sRUFDTixjQUFjLEdBQ2YsRUFDRCx3QkFBd0IsRUFDeEIsS0FBSyxFQUNMLGNBQWMsRUFDZCxnQkFBZ0IsR0FDakIsR0FBRyxJQUFJLENBQUM7SUFF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