/// <reference types="pino" />
import { Express, Router } from 'express';
import { TestAccount } from 'nodemailer';
import { Config, EmailOptions, InitOptions } from './config/types';
import { Collection, PaginatedDocs } from './collections/config/types';
import { RequestHandlers } from './init/bindRequestHandlers';
import { PayloadAuthenticate } from './express/middleware/authenticate';
import { Globals } from './globals/config/types';
import { GraphQLResolvers } from './graphql/bindResolvers';
import { ErrorHandler } from './express/middleware/errorHandler';
import performFieldOperations from './fields/performFieldOperations';
import { encrypt, decrypt } from './auth/crypto';
import { BuildEmailResult, Message } from './email/types';
import { Options as CreateOptions } from './collections/operations/local/create';
import { Options as FindOptions } from './collections/operations/local/find';
import { Options as FindByIDOptions } from './collections/operations/local/findByID';
import { Options as UpdateOptions } from './collections/operations/local/update';
import { Options as DeleteOptions } from './collections/operations/local/delete';
/**
 * @description Payload
 */
export declare class Payload {
    config: Config;
    collections: Collection[];
    graphQL: {
        resolvers: GraphQLResolvers;
    };
    globals: Globals;
    logger: import("pino").Logger;
    express: Express;
    router: Router;
    emailOptions: EmailOptions;
    email: BuildEmailResult;
    license: string;
    secret: string;
    mongoURL: string;
    local: boolean;
    encrypt: typeof encrypt;
    decrypt: typeof decrypt;
    operations: {
        [key: string]: any;
    };
    errorHandler: ErrorHandler;
    authenticate: PayloadAuthenticate;
    performFieldOperations: typeof performFieldOperations;
    requestHandlers: RequestHandlers;
    /**
     * @description Initializes Payload
     * @param options
     */
    init(options: InitOptions): void;
    sendEmail: (message: Message) => Promise<unknown>;
    getMockEmailCredentials: () => Promise<TestAccount>;
    getAdminURL: () => string;
    getAPIURL: () => string;
    /**
     * @description Performs create operation
     * @param options
     * @returns created document
     */
    create: (options: CreateOptions) => Promise<Document>;
    /**
     * @description Find documents with criteria
     * @param options
     * @returns documents satisfying query
     */
    find: (options: FindOptions) => Promise<PaginatedDocs>;
    findGlobal: (options: any) => Promise<any>;
    updateGlobal: (options: any) => Promise<any>;
    /**
     * @description Find document by ID
     * @param options
     * @returns document with specified ID
     */
    findByID: (options: FindByIDOptions) => Promise<Document>;
    /**
     * @description Update document
     * @param options
     * @returns Updated document
     */
    update: (options: UpdateOptions) => Promise<Document>;
    delete: (options: DeleteOptions) => Promise<Document>;
    login: (options: any) => Promise<any>;
    forgotPassword: (options: any) => Promise<any>;
    resetPassword: (options: any) => Promise<any>;
    unlock: (options: any) => Promise<any>;
    verifyEmail: (options: any) => Promise<any>;
}
declare const payload: Payload;
export default payload;
