"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-use-before-define */
const mongoose_1 = require("mongoose");
const errors_1 = require("../errors");
const setBlockDiscriminators = (fields, schema) => {
    fields.forEach((field) => {
        const blockFieldType = field;
        if (blockFieldType.type === 'blocks' && blockFieldType.blocks && blockFieldType.blocks.length > 0) {
            blockFieldType.blocks.forEach((blockItem) => {
                let blockSchemaFields = {};
                blockItem.fields.forEach((blockField) => {
                    const fieldSchema = fieldToSchemaMap[blockField.type];
                    if (fieldSchema) {
                        blockSchemaFields = fieldSchema(blockField, blockSchemaFields);
                    }
                });
                const blockSchema = new mongoose_1.Schema(blockSchemaFields, { _id: false });
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore Possible incorrect typing in mongoose types, this works
                schema.path(field.name).discriminator(blockItem.slug, blockSchema);
                setBlockDiscriminators(blockItem.fields, blockSchema);
            });
        }
    });
};
const formatBaseSchema = (field) => {
    const createAccess = field.access && field.access.create;
    const condition = field.admin && field.admin.condition;
    return {
        localized: field.localized || false,
        unique: field.unique || false,
        required: (field.required && !field.localized && !condition && !createAccess) || false,
        default: field.defaultValue || undefined,
        index: field.index || field.unique || false,
    };
};
const buildSchema = (configFields, options = {}) => {
    let fields = {};
    configFields.forEach((field) => {
        const fieldSchema = fieldToSchemaMap[field.type];
        if (fieldSchema) {
            fields = fieldSchema(field, fields);
        }
    });
    const schema = new mongoose_1.Schema(fields, options);
    setBlockDiscriminators(configFields, schema);
    return schema;
};
const fieldToSchemaMap = {
    number: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: Number },
    }),
    text: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: String },
    }),
    email: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: String },
    }),
    textarea: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: String },
    }),
    richText: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: mongoose_1.Schema.Types.Mixed },
    }),
    code: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: String },
    }),
    radio: (field, fields) => {
        if (!field.options || field.options.length === 0) {
            throw new errors_1.MissingFieldInputOptions(field);
        }
        const schema = {
            ...formatBaseSchema(field),
            type: String,
            enum: field.options.map((option) => {
                if (typeof option === 'object')
                    return option.value;
                return option;
            }),
        };
        return {
            ...fields,
            [field.name]: schema,
        };
    },
    checkbox: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: Boolean },
    }),
    date: (field, fields) => ({
        ...fields,
        [field.name]: { ...formatBaseSchema(field), type: Date },
    }),
    upload: (field, fields) => ({
        ...fields,
        [field.name]: {
            ...formatBaseSchema(field),
            type: mongoose_1.Schema.Types.ObjectId,
            ref: field.relationTo,
        },
    }),
    relationship: (field, fields) => {
        let schema = {};
        if (Array.isArray(field.relationTo)) {
            schema._id = false;
            schema.value = {
                type: mongoose_1.Schema.Types.ObjectId,
                refPath: `${field.name}${field.localized ? '.{{LOCALE}}' : ''}.relationTo`,
            };
            schema.relationTo = { type: String, enum: field.relationTo };
        }
        else {
            schema = {
                ...formatBaseSchema(field),
            };
            schema.type = mongoose_1.Schema.Types.ObjectId;
            schema.ref = field.relationTo;
        }
        if (field.hasMany) {
            schema = {
                type: [schema],
                localized: field.localized || false,
            };
        }
        return {
            ...fields,
            [field.name]: schema,
        };
    },
    row: (field, fields) => {
        const newFields = { ...fields };
        field.fields.forEach((rowField) => {
            const fieldSchemaMap = fieldToSchemaMap[rowField.type];
            if (fieldSchemaMap) {
                const fieldSchema = fieldSchemaMap(rowField, fields);
                newFields[rowField.name] = fieldSchema[rowField.name];
            }
        });
        return newFields;
    },
    array: (field, fields) => {
        const schema = buildSchema(field.fields, { _id: false, id: false });
        return {
            ...fields,
            [field.name]: {
                ...formatBaseSchema(field),
                type: [schema],
            },
        };
    },
    group: (field, fields) => {
        const schema = buildSchema(field.fields, { _id: false, id: false });
        return {
            ...fields,
            [field.name]: {
                ...formatBaseSchema(field),
                required: field.fields.some((subField) => subField.required === true),
                type: schema,
            },
        };
    },
    select: (field, fields) => {
        if (!field.options || field.options.length === 0) {
            throw new errors_1.MissingFieldInputOptions(field);
        }
        const schema = {
            ...formatBaseSchema(field),
            type: String,
            enum: field.options.map((option) => {
                if (typeof option === 'object')
                    return option.value;
                return option;
            }),
        };
        return {
            ...fields,
            [field.name]: field.hasMany ? [schema] : schema,
        };
    },
    blocks: (field, fields) => {
        const flexibleSchema = new mongoose_1.Schema({ blockName: String }, { discriminatorKey: 'blockType', _id: false, id: false });
        return {
            ...fields,
            [field.name]: {
                type: [flexibleSchema],
                localized: field.localized || false,
            },
        };
    },
};
exports.default = buildSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRTY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uZ29vc2UvYnVpbGRTY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsdUNBQW9EO0FBQ3BELHNDQUFxRDtBQUtyRCxNQUFNLHNCQUFzQixHQUFHLENBQUMsTUFBZSxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUN2QixNQUFNLGNBQWMsR0FBRyxLQUFtQixDQUFDO1FBQzNDLElBQUksY0FBYyxDQUFDLElBQUksS0FBSyxRQUFRLElBQUksY0FBYyxDQUFDLE1BQU0sSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFnQixFQUFFLEVBQUU7Z0JBQ2pELElBQUksaUJBQWlCLEdBQUcsRUFBRSxDQUFDO2dCQUUzQixTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO29CQUN0QyxNQUFNLFdBQVcsR0FBeUIsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM1RSxJQUFJLFdBQVcsRUFBRTt3QkFDZixpQkFBaUIsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7cUJBQ2hFO2dCQUNILENBQUMsQ0FBQyxDQUFDO2dCQUVILE1BQU0sV0FBVyxHQUFHLElBQUksaUJBQU0sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRSw2REFBNkQ7Z0JBQzdELHFFQUFxRTtnQkFDckUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVB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