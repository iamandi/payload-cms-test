"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const sanitize_1 = __importDefault(require("../../fields/config/sanitize"));
const toKebabCase_1 = __importDefault(require("../../utilities/toKebabCase"));
const baseFields_1 = __importDefault(require("../../fields/baseFields/baseFields"));
const baseAPIKeyFields_1 = __importDefault(require("../../fields/baseFields/baseAPIKeyFields"));
const baseVerificationFields_1 = __importDefault(require("../../fields/baseFields/baseVerificationFields"));
const baseAccountLockFields_1 = __importDefault(require("../../fields/baseFields/baseAccountLockFields"));
const baseUploadFields_1 = __importDefault(require("../../fields/baseFields/baseUploadFields"));
const baseImageUploadFields_1 = __importDefault(require("../../fields/baseFields/baseImageUploadFields"));
const formatLabels_1 = __importDefault(require("../../utilities/formatLabels"));
const defaults_1 = require("./defaults");
const mergeBaseFields = (fields, baseFields) => {
    const mergedFields = [];
    if (fields) {
        baseFields.forEach((baseField) => {
            let matchedIndex = null;
            const match = fields.find((field, i) => {
                if (field.name === baseField.name) {
                    matchedIndex = i;
                    return true;
                }
                return false;
            });
            if (match) {
                const matchCopy = { ...match };
                fields.splice(matchedIndex, 1);
                let mergedField = {
                    ...baseField,
                    ...matchCopy,
                };
                if (baseField.fields && matchCopy.fields) {
                    mergedField.fields = mergeBaseFields(matchCopy.fields, baseField.fields);
                    return mergedFields.push(mergedField);
                }
                mergedField = deepmerge_1.default(mergedField, matchCopy, { arrayMerge: (_, source) => source });
                return mergedFields.push(mergedField);
            }
            return mergedFields.push(baseField);
        });
        return mergedFields;
    }
    return baseFields;
};
const sanitizeCollection = (collections, collection) => {
    // /////////////////////////////////
    // Make copy of collection config
    // /////////////////////////////////
    const sanitized = deepmerge_1.default(defaults_1.defaults, collection);
    sanitized.slug = toKebabCase_1.default(sanitized.slug);
    sanitized.labels = !sanitized.labels ? formatLabels_1.default(sanitized.slug) : sanitized.labels;
    if (sanitized.upload) {
        if (sanitized.upload === true)
            sanitized.upload = {};
        sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug;
        sanitized.upload.staticURL = sanitized.upload.staticURL || `/${sanitized.slug}`;
        sanitized.admin.useAsTitle = sanitized.admin.useAsTitle || 'filename';
        let uploadFields = baseUploadFields_1.default;
        if (sanitized.upload.imageSizes && Array.isArray(sanitized.upload.imageSizes)) {
            uploadFields = uploadFields.concat(baseImageUploadFields_1.default(sanitized.upload.imageSizes));
        }
        uploadFields = mergeBaseFields(sanitized.fields, uploadFields);
        sanitized.fields = [
            ...uploadFields,
            ...sanitized.fields,
        ];
    }
    if (sanitized.auth) {
        sanitized.auth = deepmerge_1.default(defaults_1.authDefaults, typeof sanitized.auth === 'object' ? sanitized.auth : {});
        let authFields = baseFields_1.default;
        if (sanitized.auth.useAPIKey) {
            authFields = authFields.concat(baseAPIKeyFields_1.default);
        }
        if (sanitized.auth.verify) {
            if (sanitized.auth.verify === true)
                sanitized.auth.verify = {};
            authFields = authFields.concat(baseVerificationFields_1.default);
        }
        if (sanitized.auth.maxLoginAttempts > 0) {
            authFields = authFields.concat(baseAccountLockFields_1.default);
        }
        authFields = mergeBaseFields(sanitized.fields, authFields);
        sanitized.fields = [
            ...authFields,
            ...sanitized.fields,
        ];
    }
    // /////////////////////////////////
    // Sanitize fields
    // /////////////////////////////////
    const validRelationships = collections.map((c) => c.slug);
    sanitized.fields = sanitize_1.default(sanitized.fields, validRelationships);
    return sanitized;
};
exports.default = sanitizeCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdGlvbnMvY29uZmlnL3Nhbml0aXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQThCO0FBRTlCLDRFQUEwRDtBQUMxRCw4RUFBc0Q7QUFDdEQsb0ZBQWdFO0FBQ2hFLGdHQUF3RTtBQUN4RSw0R0FBb0Y7QUFDcEYsMEdBQWtGO0FBQ2xGLGdHQUF3RTtBQUN4RSwwR0FBa0Y7QUFDbEYsZ0ZBQXdEO0FBQ3hELHlDQUFvRDtBQUVwRCxNQUFNLGVBQWUsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtJQUM3QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFFeEIsSUFBSSxNQUFNLEVBQUU7UUFDVixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBRXhCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3JDLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO29CQUNqQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixPQUFPLElBQUksQ0FBQztpQkFDYjtnQkFFRCxPQUFPLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO2dCQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFFL0IsSUFBSSxXQUFXLEdBQUc7b0JBQ2hCLEdBQUcsU0FBUztvQkFDWixHQUFHLFNBQVM7aUJBQ2IsQ0FBQztnQkFFRixJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFD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