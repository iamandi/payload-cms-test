import React, { useCallback } from 'react';
import useFieldType from '../../useFieldType';
import withCondition from '../../withCondition';
import Label from '../../Label';
import Error from '../../Error';
import { text } from '../../../../../fields/validations';
import './index.scss';
const Text = (props) => {
    const { path: pathFromProps, name, required, validate = text, label, admin: { placeholder, readOnly, style, width, } = {}, minLength, maxLength, } = props;
    const path = pathFromProps || name;
    const memoizedValidate = useCallback((value) => {
        const validationResult = validate(value, { minLength, maxLength, required });
        return validationResult;
    }, [validate, maxLength, minLength, required]);
    const fieldType = useFieldType({
        path,
        validate: memoizedValidate,
        enableDebouncedValue: true,
    });
    const { value, showError, setValue, errorMessage, } = fieldType;
    const classes = [
        'field-type',
        'text',
        showError && 'error',
        readOnly && 'read-only',
    ].filter(Boolean).join(' ');
    return (React.createElement("div", { className: classes, style: {
            ...style,
            width,
        } },
        React.createElement(Error, { showError: showError, message: errorMessage }),
        React.createElement(Label, { htmlFor: path, label: label, required: required }),
        React.createElement("input", { value: value || '', onChange: setValue, disabled: readOnly, placeholder: placeholder, type: "text", id: path, name: path })));
};
export default withCondition(Text);
