import React, { useState, useEffect, useReducer } from 'react';
import getInitialState from './getInitialState';
import flattenTopLevelFields from '../../../../utilities/flattenTopLevelFields';
import Pill from '../Pill';
import Plus from '../../icons/Plus';
import X from '../../icons/X';
import './index.scss';
const baseClass = 'column-selector';
const reducer = (state, { type, payload }) => {
    if (type === 'enable') {
        return [
            ...state,
            payload,
        ];
    }
    if (type === 'replace') {
        return [
            ...payload,
        ];
    }
    return state.filter((remainingColumn) => remainingColumn !== payload);
};
const ColumnSelector = (props) => {
    const { collection, collection: { admin: { useAsTitle, defaultColumns, }, }, handleChange, } = props;
    const [initialColumns, setInitialColumns] = useState([]);
    const [fields] = useState(() => flattenTopLevelFields(collection.fields));
    const [columns, dispatchColumns] = useReducer(reducer, initialColumns);
    useEffect(() => {
        if (typeof handleChange === 'function')
            handleChange(columns);
    }, [columns, handleChange]);
    useEffect(() => {
        const { columns: initializedColumns } = getInitialState(fields, useAsTitle, defaultColumns);
        setInitialColumns(initializedColumns);
    }, [fields, useAsTitle, defaultColumns]);
    useEffect(() => {
        dispatchColumns({ payload: initialColumns, type: 'replace' });
    }, [initialColumns]);
    return (React.createElement("div", { className: baseClass }, fields && fields.map((field, i) => {
        const isEnabled = columns.find((column) => column === field.name);
        return (React.createElement(Pill, { onClick: () => dispatchColumns({ payload: field.name, type: isEnabled ? 'disable' : 'enable' }), alignIcon: "left", key: field.name || i, icon: isEnabled ? React.createElement(X, null) : React.createElement(Plus, null), pillStyle: isEnabled ? 'dark' : undefined, className: `${baseClass}__active-column` }, field.label));
    })));
};
export default ColumnSelector;
