import React from 'react';
import RenderFields from '../../RenderFields';
import withCondition from '../../withCondition';
import FieldTypeGutter from '../../FieldTypeGutter';
import { NegativeFieldGutterProvider } from '../../FieldTypeGutter/context';
import './index.scss';
const baseClass = 'group';
const Group = (props) => {
    const { label, fields, name, path: pathFromProps, fieldTypes, admin: { readOnly, style, width, }, permissions, } = props;
    const path = pathFromProps || name;
    return (React.createElement("div", { className: "field-type group", style: {
            ...style,
            width,
        } },
        React.createElement(FieldTypeGutter, null),
        React.createElement("div", { className: `${baseClass}__content-wrapper` },
            label && (React.createElement("h2", { className: `${baseClass}__title` }, label)),
            React.createElement("div", { className: `${baseClass}__fields-wrapper` },
                React.createElement(NegativeFieldGutterProvider, { allow: false },
                    React.createElement(RenderFields, { permissions: permissions?.fields, readOnly: readOnly, fieldTypes: fieldTypes, fieldSchema: fields.map((subField) => ({
                            ...subField,
                            path: `${path}${subField.name ? `.${subField.name}` : ''}`,
                        })) }))))));
};
export default withCondition(Group);
