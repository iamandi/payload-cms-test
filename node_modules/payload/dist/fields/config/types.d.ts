import { CSSProperties } from 'react';
import { Editor } from 'slate';
import { PayloadRequest } from '../../express/types';
import { Access } from '../../config/types';
import { Document } from '../../types';
import { ConditionalDateProps } from '../../admin/components/elements/DatePicker/types';
export declare type FieldHook = (args: {
    value?: unknown;
    originalDoc?: Document;
    data?: {
        [key: string]: unknown;
    };
    operation?: 'create' | 'read' | 'update' | 'delete';
    req: PayloadRequest;
}) => Promise<unknown> | unknown;
declare type Admin = {
    position?: string;
    width?: string;
    style?: CSSProperties;
    readOnly?: boolean;
    disabled?: boolean;
    condition?: (...args: any[]) => any | void;
    components?: {
        [key: string]: React.ComponentType;
    };
    hidden?: boolean;
};
export declare type Labels = {
    singular: string;
    plural: string;
};
export declare type Validate = (value: unknown, options?: any) => string | boolean;
export declare type OptionObject = {
    label: string;
    value: string;
};
export declare type Option = OptionObject | string;
export interface FieldBase {
    name?: string;
    label?: string;
    required?: boolean;
    unique?: boolean;
    index?: boolean;
    defaultValue?: any;
    hidden?: boolean;
    saveToJWT?: boolean;
    localized?: boolean;
    validate?: Validate;
    hooks?: {
        beforeValidate?: FieldHook[];
        beforeChange?: FieldHook[];
        afterChange?: FieldHook[];
        afterRead?: FieldHook[];
    };
    admin?: Admin;
    access?: {
        create?: Access;
        read?: Access;
        update?: Access;
    };
}
export declare type NumberField = FieldBase & {
    type: 'number';
    admin?: Admin & {
        autoComplete?: string;
        placeholder?: string;
        step?: number;
    };
    min?: number;
    max?: number;
};
export declare type TextField = FieldBase & {
    type: 'text';
    maxLength?: number;
    minLength?: number;
    admin?: Admin & {
        placeholder?: string;
        autoComplete?: string;
    };
};
export declare type EmailField = FieldBase & {
    type: 'email';
    admin?: Admin & {
        placeholder?: string;
        autoComplete?: string;
    };
};
export declare type TextareaField = FieldBase & {
    type: 'textarea';
    maxLength?: number;
    minLength?: number;
    admin?: Admin & {
        placeholder?: string;
        rows?: number;
    };
};
export declare type CheckboxField = FieldBase & {
    type: 'checkbox';
};
export declare type DateField = FieldBase & {
    type: 'date';
    admin?: Admin & {
        placeholder?: string;
        date?: ConditionalDateProps;
    };
};
export declare type GroupField = FieldBase & {
    type: 'group';
    fields: Field[];
};
export declare type RowField = FieldBase & {
    type: 'row';
    fields: Field[];
};
export declare type UploadField = FieldBase & {
    type: 'upload';
    relationTo: string;
};
declare type CodeAdmin = Admin & {
    language?: string;
};
export declare type CodeField = Omit<FieldBase, 'admin'> & {
    admin?: CodeAdmin;
    minLength?: number;
    maxLength?: number;
    type: 'code';
};
export declare type SelectField = FieldBase & {
    type: 'select';
    options: Option[];
    hasMany?: boolean;
};
export declare type RelationshipField = FieldBase & {
    type: 'relationship';
    relationTo: string | string[];
    hasMany?: boolean;
};
declare type RichTextPlugin = (editor: Editor) => Editor;
declare type RichTextCustomElement = {
    name: string;
    Button: React.ComponentType;
    Element: React.ComponentType;
    plugins?: RichTextPlugin[];
};
declare type RichTextCustomLeaf = {
    name: string;
    Button: React.ComponentType;
    Leaf: React.ComponentType;
    plugins?: RichTextPlugin[];
};
export declare type RichTextElement = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote' | 'ul' | 'ol' | 'link' | 'relationship' | RichTextCustomElement;
export declare type RichTextLeaf = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'code' | RichTextCustomLeaf;
export declare type RichTextField = FieldBase & {
    type: 'richText';
    admin?: Admin & {
        placeholder?: string;
        elements?: RichTextElement[];
        leaves?: RichTextLeaf[];
    };
};
export declare type ArrayField = FieldBase & {
    type: 'array';
    minRows?: number;
    maxRows?: number;
    labels?: Labels;
    fields?: Field[];
};
export declare type RadioField = FieldBase & {
    type: 'radio';
    options: Option[];
    admin?: Admin & {
        layout?: 'horizontal' | 'vertical';
    };
};
export declare type Block = {
    slug: string;
    labels: Labels;
    fields: Field[];
    imageURL?: string;
    imageAltText?: string;
};
export declare type BlockField = FieldBase & {
    type: 'blocks';
    minRows?: number;
    maxRows?: number;
    blocks?: Block[];
    defaultValue?: unknown;
    labels?: Labels;
};
export declare type Field = TextField | NumberField | EmailField | TextareaField | CheckboxField | DateField | BlockField | GroupField | RadioField | RelationshipField | ArrayField | RichTextField | SelectField | UploadField | CodeField | RowField;
export declare type FieldWithPath = Field & {
    path?: string;
};
export declare type FieldWithSubFields = GroupField | ArrayField | RowField;
export declare type FieldWithMany = SelectField | RelationshipField;
export declare function fieldHasSubFields(field: Field): field is FieldWithSubFields;
export declare function fieldIsArrayType(field: Field): field is ArrayField;
export declare function fieldIsBlockType(field: Field): field is BlockField;
export declare function optionIsObject(option: Option): option is OptionObject;
export declare function optionIsValue(option: Option): option is string;
export declare function fieldSupportsMany(field: Field): field is FieldWithMany;
export declare type HookName = 'beforeChange' | 'beforeValidate' | 'afterChange' | 'afterRead';
export {};
