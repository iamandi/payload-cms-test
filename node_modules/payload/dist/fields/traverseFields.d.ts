import { Field, HookName } from './config/types';
import { Operation } from '../types';
import { PayloadRequest } from '../express/types';
import { Payload } from '..';
declare type Arguments = {
    fields: Field[];
    data: Record<string, any>;
    originalDoc: Record<string, any>;
    path: string;
    reduceLocales: boolean;
    locale: string;
    fallbackLocale: string;
    accessPromises: Promise<void>[];
    operation: Operation;
    overrideAccess: boolean;
    req: PayloadRequest;
    id?: string;
    relationshipPopulations: (() => Promise<void>)[];
    depth: number;
    currentDepth: number;
    hook: HookName;
    hookPromises: Promise<void>[];
    fullOriginalDoc: Record<string, any>;
    fullData: Record<string, any>;
    validationPromises: (() => Promise<string | boolean>)[];
    errors: {
        message: string;
        field: string;
    }[];
    payload: Payload;
    showHiddenFields: boolean;
};
declare const traverseFields: (args: Arguments) => void;
export default traverseFields;
