"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nodemailer_1 = __importDefault(require("nodemailer"));
const types_1 = require("../config/types");
const errors_1 = require("../errors");
const mockHandler_1 = __importDefault(require("./mockHandler"));
const logger_1 = __importDefault(require("../utilities/logger"));
const logger = logger_1.default();
async function handleTransport(transport, email) {
    try {
        await transport.verify();
    }
    catch (err) {
        logger.error('There is an error with the email configuration you have provided.', err);
    }
    return { ...email, transport };
}
const ensureConfigHasFrom = (emailConfig) => {
    if (!emailConfig.fromName || !emailConfig.fromAddress) {
        throw new errors_1.InvalidConfiguration('Email fromName and fromAddress must be configured when transport is configured');
    }
};
async function buildEmail(emailConfig) {
    if (types_1.hasTransport(emailConfig) && emailConfig.transport) {
        ensureConfigHasFrom(emailConfig);
        const email = { ...emailConfig };
        const { transport } = emailConfig;
        return handleTransport(transport, email);
    }
    if (types_1.hasTransportOptions(emailConfig) && emailConfig.transportOptions) {
        ensureConfigHasFrom(emailConfig);
        const email = { ...emailConfig };
        const transport = nodemailer_1.default.createTransport(emailConfig.transportOptions);
        return handleTransport(transport, email);
    }
    const mockAccount = await mockHandler_1.default(emailConfig);
    // Only log mock credentials if was explicitly set in config
    const { account: { web, user, pass } } = mockAccount;
    logger.info('E-mail configured with mock configuration');
    logger.info(`Log into mock email provider at ${web}`);
    logger.info(`Mock email account username: ${user}`);
    logger.info(`Mock email account password: ${pass}`);
    return mockAccount;
}
exports.default = buildEmail;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW1haWwvYnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBcUQ7QUFDckQsMkNBQWtHO0FBQ2xHLHNDQUFpRDtBQUNqRCxnRUFBd0M7QUFDeEMsaUVBQXlDO0FBR3pDLE1BQU0sTUFBTSxHQUFHLGdCQUFNLEVBQUUsQ0FBQztBQUV4QixLQUFLLFVBQVUsZUFBZSxDQUFDLFNBQXNCLEVBQUUsS0FBcUI7SUFDMUUsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLENBQUMsS0FBSyxDQUNWLG1FQUFtRSxFQUNuRSxHQUFHLENBQ0osQ0FBQztLQUNIO0lBRUQsT0FBTyxFQUFFLEdBQUcsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1FBQ3JELE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO0tBQ2xIO0FBQ0gsQ0FBQyxDQUFDO0FBRWEsS0FBSyxVQUFVLFVBQVUsQ0FBQyxXQUF5QjtJQUNoRSxJQUFJLG9CQUFZLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRTtRQUN0RCxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqQyxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsV0FBVyxFQUFFLENBQUM7UUFDakMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUE4QixXQUFXLENBQUM7UUFDN0QsT0FBTyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBRUQsSUFBSSwyQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7UUFDcEUsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLFdBQVcsRUFBb0IsQ0FBQztRQUNuRCxNQUFNLFNBQVMsR0FBRyxvQkFBVSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRSxPQUFPLGVBQWUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDMUM7SUFFRCxNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsNERBQTREO0lBQzVELE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsV0FBVyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBdkJELDZCQXVCQyJ9