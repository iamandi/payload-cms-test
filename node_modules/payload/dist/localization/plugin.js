"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable func-names */
/* eslint-disable no-param-reassign */
/* eslint-disable no-restricted-syntax */
const mongoose_1 = __importDefault(require("mongoose"));
const sanitizeFallbackLocale_1 = __importDefault(require("./sanitizeFallbackLocale"));
const formatRefPathLocales_1 = __importDefault(require("./formatRefPathLocales"));
function localizationPlugin(schema, options) {
    if (!options || !options.locales || !Array.isArray(options.locales) || !options.locales.length) {
        throw new mongoose_1.default.Error('Required locales array is missing');
    }
    schema.eachPath((path, schemaType) => {
        if (schemaType.schema) { // propagate plugin initialization for sub-documents schemas
            schemaType.schema.plugin(localizationPlugin, options);
        }
        if (!schemaType.options.localized && !(schemaType.schema && schemaType.schema.options.localized)) {
            return;
        }
        if (schemaType.options.unique) {
            schemaType.options.sparse = true;
        }
        const pathArray = path.split('.');
        const key = pathArray.pop();
        let prefix = pathArray.join('.');
        if (prefix)
            prefix += '.';
        // removing real path, it will be changed to virtual later
        schema.remove(path);
        // schema.remove removes path from paths object only, but doesn't update tree
        // sounds like a bug, removing item from the tree manually
        const tree = pathArray.reduce((mem, part) => mem[part], schema.tree);
        delete tree[key];
        schema.virtual(path)
            .get(function () {
            // embedded and sub-documents will use locale methods from the top level document
            const owner = this.ownerDocument ? this.ownerDocument() : this;
            const locale = owner.getLocale();
            const localeSubDoc = this.$__getValue(path);
            if (localeSubDoc === null || localeSubDoc === undefined) {
                return localeSubDoc;
            }
            const value = localeSubDoc[locale] || null;
            if (locale === 'all') {
                return localeSubDoc;
            }
            // If there is no value to return, AKA no translation in locale, handle fallbacks
            if (!value) {
                // If user specified fallback code as null, send back null
                if (this.fallbackLocale === null || (this.fallbackLocale && !localeSubDoc[this.fallbackLocale])) {
                    return null;
                    // If user specified fallback code AND record exists, return that
                }
                if (localeSubDoc[this.fallbackLocale]) {
                    return localeSubDoc[this.fallbackLocale];
                    // Otherwise, check if there is a default fallback value and if so, send that
                }
                if (options.fallback && localeSubDoc[options.defaultLocale]) {
                    return localeSubDoc[options.defaultLocale];
                }
            }
            return value;
        })
            .set(function (value) {
            // multiple locales are set as an object
            if (value && typeof value === 'object' && !Array.isArray(value)) {
                const { locales } = options;
                locales.forEach((locale) => {
                    if (!value[locale]) {
                        return;
                    }
                    this.set(`${path}.${locale}`, value[locale]);
                }, this);
                return;
            }
            // embedded and sub-documents will use locale methods from the top level document
            const owner = this.ownerDocument ? this.ownerDocument() : this;
            const locale = owner.getLocale();
            this.set(`${path}.${locale}`, value);
        });
        // localized option is not needed for the current path any more,
        // and is unwanted for all child locale-properties
        // delete schemaType.options.localized; // This was removed to allow viewing inside query parser
        const localizedObject = {
            [key]: {},
        };
        options.locales.forEach(function (locale) {
            const localeOptions = { ...schemaType.options };
            if (locale !== options.defaultLocale) {
                delete localeOptions.default;
                delete localeOptions.required;
            }
            if (schemaType.options.defaultAll) {
                localeOptions.default = schemaType.options.defaultAll;
            }
            if (schemaType.options.requiredAll) {
                localeOptions.required = schemaType.options.requiredAll;
            }
            this[locale] = localeOptions;
        }, localizedObject[key]);
        schema.add(localizedObject, prefix);
    });
    schema.eachPath((path, schemaType) => {
        if (schemaType.schema && schemaType.options.localized && schemaType.schema.discriminators) {
            Object.keys(schemaType.schema.discriminators).forEach((key) => {
                if (schema.path(path)) {
                    schema.path(path).discriminator(key, schemaType.schema.discriminators[key]);
                }
            });
        }
    });
    // document methods to set the locale for each model instance (document)
    schema.method({
        getLocales() {
            return options.locales;
        },
        getLocale() {
            return this.docLocale || options.defaultLocale;
        },
        setLocale(locale, fallbackLocale) {
            const locales = [...this.getLocales(), 'all'];
            if (locale && locales.indexOf(locale) !== -1) {
                this.docLocale = locale;
            }
            this.fallbackLocale = sanitizeFallbackLocale_1.default(fallbackLocale);
            this.schema.eachPath((path, schemaType) => {
                if (schemaType.options.type instanceof Array) {
                    if (this[path])
                        this[path].forEach((doc) => doc.setLocale && doc.setLocale(locale, this.fallbackLocale));
                }
                if (schemaType.options.ref && this[path]) {
                    if (this[path] && this[path].setLocale)
                        this[path].setLocale(locale, this.fallbackLocale);
                }
            });
        },
    });
    // Find any dynamic {{LOCALE}} in refPaths and modify schemas appropriately
    formatRefPathLocales_1.default(schema);
}
exports.default = localizationPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvY2FsaXphdGlvbi9wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBK0I7QUFDL0Isc0NBQXNDO0FBQ3RDLHlDQUF5QztBQUN6Qyx3REFBZ0M7QUFDaEMsc0ZBQThEO0FBQzlELGtGQUEwRDtBQUUxRCxTQUF3QixrQkFBa0IsQ0FBQyxNQUFXLEVBQUUsT0FBTztJQUM3RCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7UUFDOUYsTUFBTSxJQUFJLGtCQUFRLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7S0FDL0Q7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFO1FBQ25DLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLDREQUE0RDtZQUNuRixVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN2RDtRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoRyxPQUFPO1NBQ1I7UUFFRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzdCLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNsQztRQUVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsSUFBSSxNQUFNO1lBQUUsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUUxQiwwREFBMEQ7UUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQiw2RUFBNkU7UUFDN0UsMERBQTBEO1FBQzFELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2FBQ2pCLEdBQUcsQ0FBQztZQUNILGlGQUFpRjtZQUNqRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMvRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDakMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU1QyxJQUFJLFlBQVksS0FBSyxJQUFJLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtnQkFDdkQsT0FBTyxZQUFZLENBQUM7YUFDckI7WUFFRCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO1lBRTNDLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtnQkFDcEIsT0FBTyxZQUFZLENBQUM7YUFDckI7WUFFRCxpRkFBaUY7WUFDakYsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDViwwREFBMEQ7Z0JBQzFELElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFO29CQUMvRixPQUFPLElBQUksQ0FBQztvQkFFWixpRUFBaUU7aUJBQ2xFO2dCQUFDLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtvQkFDdkMsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUV6Qyw2RUFBNkU7aUJBQzlFO2dCQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUM3RCxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQzVDO2FBQ0Y7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQzthQUNELEdBQUcsQ0FBQyxVQUFVLEtBQUs7WUFDbEIsd0NBQXdDO1lBQ3hDLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQy9ELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUM7Z0JBQzVCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTt3QkFDbEIsT0FBTztxQkFDUjtvQkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ1QsT0FBTzthQUNSO1lBRUQsaUZBQWlGO1lBQ2pGLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQy9ELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVqQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUwsZ0VBQWdFO1FBQ2hFLGtEQUFrRDtRQUNsRCxnR0FBZ0c7UUFFaEcsTUFBTSxlQUFlLEdBQUc7WUFDdEIsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO1NBQ1YsQ0FBQztRQUVGLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsTUFBTTtZQUN0QyxNQUFNLGFBQWEsR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2hELElBQUksTUFBTSxLQUFLLE9BQU8sQ0FBQyxhQUFhLEVBQUU7Z0JBQ3BDLE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQztnQkFDN0IsT0FBTyxhQUFhLENBQUMsUUFBUSxDQUFDO2FBQy9CO1lBRUQsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtnQkFDakMsYUFBYSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQzthQUN2RDtZQUVELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDekQ7WUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDO1FBQy9CLENBQUMsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV6QixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUU7UUFDbkMsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQ3pGLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDNUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDN0U7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCx3RUFBd0U7SUFDeEUsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNaLFVBQVU7WUFDUixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDekIsQ0FBQztRQUNELFNBQVM7WUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNqRCxDQUFDO1FBQ0QsU0FBUyxDQUFDLE1BQU0sRUFBRSxjQUFjO1lBQzlCLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDOUMsSUFBSSxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7YUFDekI7WUFFRCxJQUFJLENBQUMsY0FBYyxHQUFHLGdDQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFO2dCQUN4QyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFZLEtBQUssRUFBRTtvQkFDNUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO3dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7aUJBQzFHO2dCQUVELElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN4QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUzt3QkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQzNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsMkVBQTJFO0lBQzNFLDhCQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUEzSkQscUNBMkpDIn0=