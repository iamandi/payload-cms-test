"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_status_1 = __importDefault(require("http-status"));
const deepmerge_1 = __importDefault(require("deepmerge"));
const path_1 = __importDefault(require("path"));
const removeInternalFields_1 = __importDefault(require("../../utilities/removeInternalFields"));
const overwriteMerge_1 = __importDefault(require("../../utilities/overwriteMerge"));
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const errors_1 = require("../../errors");
const isImage_1 = __importDefault(require("../../uploads/isImage"));
const getImageSize_1 = __importDefault(require("../../uploads/getImageSize"));
const getSafeFilename_1 = __importDefault(require("../../uploads/getSafeFilename"));
const imageResizer_1 = __importDefault(require("../../uploads/imageResizer"));
const types_1 = require("../../auth/types");
async function update(incomingArgs) {
    const { performFieldOperations, config } = this;
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {
        await priorHook;
        args = (await hook({
            args,
            operation: 'update',
        })) || args;
    }, Promise.resolve());
    const { depth, collection: { Model, config: collectionConfig, }, id, req, req: { locale, fallbackLocale, }, overrideAccess, showHiddenFields, } = args;
    if (!id) {
        throw new errors_1.APIError('Missing ID of document to update.', http_status_1.default.BAD_REQUEST);
    }
    // /////////////////////////////////////
    // Access
    // /////////////////////////////////////
    const accessResults = !overrideAccess ? await executeAccess_1.default({ req, id }, collectionConfig.access.update) : true;
    const hasWherePolicy = types_1.hasWhereAccessResult(accessResults);
    // /////////////////////////////////////
    // Retrieve document
    // /////////////////////////////////////
    const queryToBuild = {
        where: {
            and: [
                {
                    id: {
                        equals: id,
                    },
                },
            ],
        },
    };
    if (types_1.hasWhereAccessResult(accessResults)) {
        queryToBuild.where.and.push(accessResults);
    }
    const query = await Model.buildQuery(queryToBuild, locale);
    const doc = await Model.findOne(query);
    if (!doc && !hasWherePolicy)
        throw new errors_1.NotFound();
    if (!doc && hasWherePolicy)
        throw new errors_1.Forbidden();
    if (locale && doc.setLocale) {
        doc.setLocale(locale, fallbackLocale);
    }
    let originalDoc = doc.toJSON({ virtuals: true });
    originalDoc = JSON.stringify(originalDoc);
    originalDoc = JSON.parse(originalDoc);
    let { data } = args;
    // /////////////////////////////////////
    // beforeValidate - Fields
    // /////////////////////////////////////
    data = await performFieldOperations(collectionConfig, {
        data,
        req,
        id,
        originalDoc,
        hook: 'beforeValidate',
        operation: 'update',
        overrideAccess,
    });
    // /////////////////////////////////////
    // beforeValidate - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'update',
            originalDoc,
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Fields
    // /////////////////////////////////////
    data = await performFieldOperations(collectionConfig, {
        data,
        req,
        id,
        originalDoc,
        hook: 'beforeChange',
        operation: 'update',
        overrideAccess,
    });
    // /////////////////////////////////////
    // beforeChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            originalDoc,
            operation: 'update',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Merge updates into existing data
    // /////////////////////////////////////
    data = deepmerge_1.default(originalDoc, data, { arrayMerge: overwriteMerge_1.default });
    // /////////////////////////////////////
    // Upload and resize potential files
    // /////////////////////////////////////
    if (collectionConfig.upload) {
        const fileData = {};
        const { staticDir, imageSizes } = collectionConfig.upload;
        let staticPath = staticDir;
        if (staticDir.indexOf('/') !== 0) {
            staticPath = path_1.default.join(config.paths.configDir, staticDir);
        }
        const file = ((req.files && req.files.file) ? req.files.file : req.file);
        if (file) {
            const fsSafeName = await getSafeFilename_1.default(staticPath, file.name);
            try {
                await file.mv(`${staticPath}/${fsSafeName}`);
                fileData.filename = fsSafeName;
                fileData.filesize = file.size;
                fileData.mimeType = file.mimetype;
                if (isImage_1.default(file.mimetype)) {
                    const dimensions = await getImageSize_1.default(`${staticPath}/${fsSafeName}`);
                    fileData.width = dimensions.width;
                    fileData.height = dimensions.height;
                    if (Array.isArray(imageSizes) && file.mimetype !== 'image/svg+xml') {
                        fileData.sizes = await imageResizer_1.default(staticPath, collectionConfig, fsSafeName, fileData.mimeType);
                    }
                }
            }
            catch (err) {
                throw new errors_1.FileUploadError();
            }
            data = {
                ...data,
                ...fileData,
            };
        }
        else if (data.file === null) {
            data = {
                ...data,
                filename: null,
                sizes: null,
            };
        }
    }
    // /////////////////////////////////////
    // Handle potential password update
    // /////////////////////////////////////
    const { password } = data;
    if (password) {
        await doc.setPassword(password);
        delete data.password;
    }
    // /////////////////////////////////////
    // Update
    // /////////////////////////////////////
    Object.assign(doc, data);
    await doc.save();
    let result = doc.toJSON({ virtuals: true });
    result = removeInternalFields_1.default(result);
    result = JSON.stringify(result);
    result = JSON.parse(result);
    // /////////////////////////////////////
    // afterChange - Fields
    // /////////////////////////////////////
    result = await performFieldOperations(collectionConfig, {
        data: result,
        hook: 'afterChange',
        operation: 'update',
        req,
        id,
        depth,
        overrideAccess,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            doc: result,
            req,
            operation: 'update',
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // afterRead - Fields
    // /////////////////////////////////////
    result = await performFieldOperations(collectionConfig, {
        depth,
        req,
        data: result,
        hook: 'afterRead',
        operation: 'update',
        overrideAccess,
        reduceLocales: false,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterRead - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            req,
            doc: result,
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Return results
    // /////////////////////////////////////
    return result;
}
exports.default = update;
//# sourceMappingURL=data:application/json;base64,