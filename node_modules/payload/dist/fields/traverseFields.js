"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validationPromise_1 = __importDefault(require("./validationPromise"));
const accessPromise_1 = __importDefault(require("./accessPromise"));
const hookPromise_1 = __importDefault(require("./hookPromise"));
const types_1 = require("./config/types");
const traverseFields = (args) => {
    const { fields, data = {}, originalDoc = {}, path, reduceLocales, locale, fallbackLocale, accessPromises, operation, overrideAccess, req, id, relationshipPopulations, depth, currentDepth, hook, hookPromises, fullOriginalDoc, fullData, validationPromises, errors, payload, showHiddenFields, } = args;
    fields.forEach((field) => {
        const dataCopy = data;
        if (operation === 'read' && field.hidden && typeof data[field.name] !== 'undefined' && !showHiddenFields) {
            delete data[field.name];
        }
        if ((field.type === 'upload' || field.type === 'relationship')
            && (data[field.name] === '' || data[field.name] === 'none' || data[field.name] === 'null')) {
            dataCopy[field.name] = null;
        }
        if (field.type === 'checkbox') {
            if (data[field.name] === 'true')
                dataCopy[field.name] = true;
            if (data[field.name] === 'false')
                dataCopy[field.name] = false;
            if (data[field.name] === '')
                dataCopy[field.name] = false;
        }
        if (field.type === 'richText' && typeof data[field.name] === 'string') {
            dataCopy[field.name] = JSON.parse(data[field.name]);
        }
        const hasLocalizedValue = (typeof data[field.name] === 'object' && data[field.name] !== null)
            && field.name
            && field.localized
            && locale !== 'all'
            && reduceLocales;
        if (hasLocalizedValue) {
            let localizedValue = data[field.name][locale];
            if (typeof localizedValue === 'undefined' && fallbackLocale)
                localizedValue = data[field.name][fallbackLocale];
            if (typeof localizedValue === 'undefined')
                localizedValue = null;
            dataCopy[field.name] = localizedValue;
        }
        accessPromises.push(accessPromise_1.default({
            data,
            originalDoc,
            field,
            operation,
            overrideAccess,
            req,
            id,
            relationshipPopulations,
            depth,
            currentDepth,
            hook,
            payload,
        }));
        hookPromises.push(hookPromise_1.default({
            data,
            field,
            hook,
            req,
            operation,
            fullOriginalDoc,
            fullData,
        }));
        if (types_1.fieldHasSubFields(field)) {
            if (field.name === undefined) {
                traverseFields({
                    ...args,
                    fields: field.fields,
                });
            }
            else if (types_1.fieldIsArrayType(field)) {
                if (Array.isArray(data[field.name])) {
                    data[field.name].forEach((rowData, i) => {
                        const originalDocRow = originalDoc && originalDoc[field.name] && originalDoc[field.name][i];
                        traverseFields({
                            ...args,
                            fields: field.fields,
                            data: rowData,
                            originalDoc: originalDocRow || undefined,
                            path: `${path}${field.name}.${i}.`,
                        });
                    });
                }
            }
            else {
                traverseFields({
                    ...args,
                    fields: field.fields,
                    data: data[field.name],
                    originalDoc: originalDoc[field.name],
                    path: `${path}${field.name}.`,
                });
            }
        }
        if (types_1.fieldIsBlockType(field)) {
            if (Array.isArray(data[field.name])) {
                data[field.name].forEach((rowData, i) => {
                    const block = field.blocks.find((blockType) => blockType.slug === rowData.blockType);
                    const originalDocRow = originalDoc && originalDoc[field.name] && originalDoc[field.name][i];
                    if (block) {
                        traverseFields({
                            ...args,
                            fields: block.fields,
                            data: rowData,
                            originalDoc: originalDocRow || undefined,
                            path: `${path}${field.name}.${i}.`,
                        });
                    }
                });
            }
        }
        if ((operation === 'create' || operation === 'update') && field.name) {
            const updatedData = data;
            if (data[field.name] === undefined && originalDoc[field.name] === undefined && field.defaultValue) {
                updatedData[field.name] = field.defaultValue;
            }
            if (field.type === 'array' || field.type === 'blocks') {
                const hasRowsOfNewData = Array.isArray(data[field.name]);
                const newRowCount = hasRowsOfNewData ? data[field.name].length : 0;
                // Handle cases of arrays being intentionally set to 0
                if (data[field.name] === '0' || data[field.name] === 0 || data[field.name] === null) {
                    updatedData[field.name] = [];
                }
                const hasRowsOfExistingData = Array.isArray(originalDoc[field.name]);
                const existingRowCount = hasRowsOfExistingData ? originalDoc[field.name].length : 0;
                validationPromises.push(() => validationPromise_1.default({
                    errors,
                    hook,
                    newData: { [field.name]: newRowCount },
                    existingData: { [field.name]: existingRowCount },
                    field,
                    path,
                }));
            }
            else {
                validationPromises.push(() => validationPromise_1.default({
                    errors,
                    hook,
                    newData: data,
                    existingData: originalDoc,
                    field,
                    path,
                }));
            }
        }
    });
};
exports.default = traverseFields;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVyc2VGaWVsZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmllbGRzL3RyYXZlcnNlRmllbGRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNEVBQW9EO0FBQ3BELG9FQUE0QztBQUM1QyxnRUFBd0M7QUFDeEMsMENBQXdHO0FBK0J4RyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQWUsRUFBUSxFQUFFO0lBQy9DLE1BQU0sRUFDSixNQUFNLEVBQ04sSUFBSSxHQUFHLEVBQUUsRUFDVCxXQUFXLEdBQUcsRUFBRSxFQUNoQixJQUFJLEVBQ0osYUFBYSxFQUNiLE1BQU0sRUFDTixjQUFjLEVBQ2QsY0FBYyxFQUNkLFNBQVMsRUFDVCxjQUFjLEVBQ2QsR0FBRyxFQUNILEVBQUUsRUFDRix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLFlBQVksRUFDWixJQUFJLEVBQ0osWUFBWSxFQUNaLGVBQWUsRUFDZixRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLE1BQU0sRUFDTixPQUFPLEVBQ1AsZ0JBQWdCLEdBQ2pCLEdBQUcsSUFBSSxDQUFDO0lBRVQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQztRQUV0QixJQUFJLFNBQVMsS0FBSyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssV0FBVyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEcsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDO2VBQzNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxD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