"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const removeInternalFields_1 = __importDefault(require("../../utilities/removeInternalFields"));
async function findOne(args) {
    const { globals: { Model } } = this;
    const { globalConfig, req, slug, depth, showHiddenFields, } = args;
    // /////////////////////////////////////
    // 1. Retrieve and execute access
    // /////////////////////////////////////
    await executeAccess_1.default({ req }, globalConfig.access.read);
    // /////////////////////////////////////
    // 2. Perform database operation
    // /////////////////////////////////////
    let doc = await Model.findOne({ globalType: slug }).lean();
    if (!doc) {
        doc = {};
    }
    else if (doc._id) {
        doc.id = doc._id;
        delete doc._id;
    }
    // /////////////////////////////////////
    // 3. Execute before collection hook
    // /////////////////////////////////////
    await globalConfig.hooks.beforeRead.reduce(async (priorHook, hook) => {
        await priorHook;
        doc = await hook({
            req,
            doc,
        }) || doc;
    }, Promise.resolve());
    // /////////////////////////////////////
    // 4. Execute field-level hooks and access
    // /////////////////////////////////////
    doc = await this.performFieldOperations(globalConfig, {
        data: doc,
        hook: 'afterRead',
        operation: 'read',
        req,
        depth,
        reduceLocales: true,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // 5. Execute after collection hook
    // /////////////////////////////////////
    await globalConfig.hooks.afterRead.reduce(async (priorHook, hook) => {
        await priorHook;
        doc = await hook({
            req,
            doc,
        }) || doc;
    }, Promise.resolve());
    // /////////////////////////////////////
    // 6. Return results
    // /////////////////////////////////////
    doc = removeInternalFields_1.default(doc);
    doc = JSON.stringify(doc);
    doc = JSON.parse(doc);
    return doc;
}
exports.default = findOne;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZE9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nbG9iYWxzL29wZXJhdGlvbnMvZmluZE9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDZFQUFxRDtBQUNyRCxnR0FBd0U7QUFFeEUsS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFJO0lBQ3pCLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztJQUVwQyxNQUFNLEVBQ0osWUFBWSxFQUNaLEdBQUcsRUFDSCxJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFnQixHQUNqQixHQUFHLElBQUksQ0FBQztJQUVULHdDQUF3QztJQUN4QyxpQ0FBaUM7SUFDakMsd0NBQXdDO0lBRXhDLE1BQU0sdUJBQWEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdkQsd0NBQXdDO0lBQ3hDLGdDQUFnQztJQUNoQyx3Q0FBd0M7SUFFeEMsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFM0QsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLEdBQUcsR0FBRyxFQUFFLENBQUM7S0FDVjtTQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRTtRQUNsQixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDakIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDO0tBQ2hCO0lBRUQsd0NBQXdDO0lBQ3hDLG9DQUFvQztJQUNwQyx3Q0FBd0M7SUFFeEMsTUFBTSxZQUFZLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNuRSxNQUFNLFNBQVMsQ0FBQztRQUVoQixHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUM7WUFDZixHQUFHO1lBQ0gsR0FBRztTQUNKLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDWixDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFdEIsd0NBQXdDO0lBQ3hDLDBDQUEwQztJQUMxQyx3Q0FBd0M7SUFFeEMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRTtRQUNwRCxJQUFJLEVBQUUsR0FBRztRQUNULElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLEdBQUc7UUFDSCxLQUFLO1FBQ0wsYUFBYSxFQUFFLElBQUk7UUFDbkIsZ0JBQWdCO0tBQ2pCLENBQUMsQ0FBQztJQUVILHdDQUF3QztJQUN4QyxtQ0FBbUM7SUFDbkMsd0NBQXdDO0lBRXhDLE1BQU0sWUFBWSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDbEUsTUFBTSxTQUFTLENBQUM7UUFFaEIsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO1lBQ2YsR0FBRztZQUNILEdBQUc7U0FDSixDQUFDLElBQUksR0FBRyxDQUFDO0lBQ1osQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLHdDQUF3QztJQUN4QyxvQkFBb0I7SUFDcEIsd0NBQXdDO0lBRXhDLEdBQUcsR0FBRyw4QkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxrQkFBZSxPQUFPLENBQUMifQ==