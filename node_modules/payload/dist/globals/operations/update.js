"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const overwriteMerge_1 = __importDefault(require("../../utilities/overwriteMerge"));
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const removeInternalFields_1 = __importDefault(require("../../utilities/removeInternalFields"));
async function update(args) {
    const { globals: { Model } } = this;
    const { globalConfig, slug, req, req: { locale, fallbackLocale, }, depth, overrideAccess, showHiddenFields, } = args;
    // /////////////////////////////////////
    // 1. Retrieve and execute access
    // /////////////////////////////////////
    if (!overrideAccess) {
        await executeAccess_1.default({ req }, globalConfig.access.update);
    }
    // /////////////////////////////////////
    // 2. Retrieve document
    // /////////////////////////////////////
    let global = await Model.findOne({ globalType: slug });
    if (!global) {
        global = new Model({ globalType: slug });
    }
    if (locale && global.setLocale) {
        global.setLocale(locale, fallbackLocale);
    }
    const globalJSON = global.toJSON({ virtuals: true });
    if (globalJSON._id) {
        delete globalJSON._id;
    }
    let { data } = args;
    // /////////////////////////////////////
    // 3. Execute before validate collection hooks
    // /////////////////////////////////////
    await globalConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            originalDoc: globalJSON,
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // 4. Execute field-level hooks, access, and validation
    // /////////////////////////////////////
    data = await this.performFieldOperations(globalConfig, {
        data,
        req,
        hook: 'beforeChange',
        operation: 'update',
        originalDoc: global,
    });
    // /////////////////////////////////////
    // 5. Execute before global hook
    // /////////////////////////////////////
    await globalConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            originalDoc: global,
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // 6. Merge updates into existing data
    // /////////////////////////////////////
    data = deepmerge_1.default(globalJSON, data, { arrayMerge: overwriteMerge_1.default });
    // /////////////////////////////////////
    // 7. Perform database operation
    // /////////////////////////////////////
    Object.assign(global, data);
    await global.save();
    global = global.toJSON({ virtuals: true });
    // /////////////////////////////////////
    // 8. Execute field-level hooks and access
    // /////////////////////////////////////
    global = await this.performFieldOperations(globalConfig, {
        data: global,
        hook: 'afterRead',
        operation: 'read',
        req,
        depth,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // 9. Execute after global hook
    // /////////////////////////////////////
    await globalConfig.hooks.afterChange.reduce(async (priorHook, hook) => {
        await priorHook;
        global = await hook({
            doc: global,
            req,
        }) || global;
    }, Promise.resolve());
    // /////////////////////////////////////
    // 10. Return global
    // /////////////////////////////////////
    global = removeInternalFields_1.default(global);
    return global;
}
exports.default = update;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dsb2JhbHMvb3BlcmF0aW9ucy91cGRhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwREFBa0M7QUFDbEMsb0ZBQTREO0FBQzVELDZFQUFxRDtBQUNyRCxnR0FBd0U7QUFHeEUsS0FBSyxVQUFVLE1BQU0sQ0FBQyxJQUFJO0lBQ3hCLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQztJQUVwQyxNQUFNLEVBQ0osWUFBWSxFQUNaLElBQUksRUFDSixHQUFHLEVBQ0gsR0FBRyxFQUFFLEVBQ0gsTUFBTSxFQUNOLGNBQWMsR0FDZixFQUNELEtBQUssRUFDTCxjQUFjLEVBQ2QsZ0JBQWdCLEdBQ2pCLEdBQUcsSUFBSSxDQUFDO0lBRVQsd0NBQXdDO0lBQ3hDLGlDQUFpQztJQUNqQyx3Q0FBd0M7SUFFeEMsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQixNQUFNLHVCQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzFEO0lBRUQsd0NBQXdDO0lBQ3hDLHVCQUF1QjtJQUN2Qix3Q0FBd0M7SUFFeEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFdkQsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzFDO0lBRUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUM5QixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMxQztJQUVELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxN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