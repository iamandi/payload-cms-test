"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const passport_1 = __importDefault(require("passport"));
const compression_1 = __importDefault(require("compression"));
const body_parser_1 = __importDefault(require("body-parser"));
const method_override_1 = __importDefault(require("method-override"));
const qs_middleware_1 = __importDefault(require("qs-middleware"));
const express_fileupload_1 = __importDefault(require("express-fileupload"));
const express_rate_limit_1 = __importDefault(require("express-rate-limit"));
const middleware_1 = __importDefault(require("../../localization/middleware"));
const authenticate_1 = __importDefault(require("./authenticate"));
const identifyAPI_1 = __importDefault(require("./identifyAPI"));
const middleware = (payload) => {
    const rateLimitOptions = {
        windowMs: payload.config.rateLimit.window,
        max: payload.config.rateLimit.max,
    };
    if (typeof payload.config.rateLimit.skip === 'function')
        rateLimitOptions.skip = payload.config.rateLimit.skip;
    return [
        express_rate_limit_1.default(rateLimitOptions),
        passport_1.default.initialize(),
        identifyAPI_1.default('REST'),
        method_override_1.default('X-HTTP-Method-Override'),
        qs_middleware_1.default({ depth: 10 }),
        body_parser_1.default.urlencoded({ extended: true }),
        compression_1.default(payload.config.express.compression),
        middleware_1.default(payload.config.localization),
        express_1.default.json(payload.config.express.json),
        express_fileupload_1.default({
            parseNested: true,
            ...payload.config.upload,
        }),
        (req, res, next) => {
            if (payload.config.cors) {
                res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');
                res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Content-Encoding');
                if (payload.config.cors === '*') {
                    res.setHeader('Access-Control-Allow-Origin', '*');
                }
                else if (Array.isArray(payload.config.cors) && payload.config.cors.indexOf(req.headers.origin) > -1) {
                    res.header('Access-Control-Allow-Credentials', true);
                    res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
                }
            }
            next();
        },
        authenticate_1.default(payload.config),
        ...(payload.config.express.middleware || []),
    ];
};
exports.default = middleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZXhwcmVzcy9taWRkbGV3YXJlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0RBQThCO0FBQzlCLHdEQUFnQztBQUNoQyw4REFBc0M7QUFDdEMsOERBQXFDO0FBQ3JDLHNFQUE2QztBQUM3QyxrRUFBeUM7QUFDekMsNEVBQTRDO0FBQzVDLDRFQUEyQztBQUMzQywrRUFBbUU7QUFDbkUsa0VBQTBDO0FBQzFDLGdFQUF3QztBQUl4QyxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQWdCLEVBQU8sRUFBRTtJQUMzQyxNQUFNLGdCQUFnQixHQUlsQjtRQUNGLFFBQVEsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNO1FBQ3pDLEdBQUcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHO0tBQ2xDLENBQUM7SUFFRixJQUFJLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLFVBQVU7UUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBRS9HLE9BQU87UUFDTCw0QkFBUyxDQUFDLGdCQUFnQixDQUFDO1FBQzNCLGtCQUFRLENBQUMsVUFBVSxFQUFFO1FBQ3JCLHFCQUFXLENBQUMsTUFBTSxDQUFDO1FBQ25CLHlCQUFjLENBQUMsd0JBQXdCLENBQUM7UUFDeEMsdUJBQVksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzQixxQkFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN6QyxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUMvQyxvQkFBc0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUNuRCxpQkFBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekMsNEJBQVUsQ0FBQztZQUNULFdBQVcsRUFBRSxJQUFJO1lBQ2pCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNO1NBQ3pCLENBQUM7UUFDRixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDakIsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDdkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO2dCQUM5RSxHQUFHLENBQUMsTUFBTSxDQUFDLDhCQUE4QixFQUFFLGlGQUFpRixDQUFDLENBQUM7Z0JBRTlILElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFO29CQUMvQixHQUFHLENBQUMsU0FBUyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUNuRDtxQkFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDckcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDckQsR0FBRyxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNsRTthQUNGO1lBRUQsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDO1FBQ0Qsc0JBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixrQkFBZSxVQUFVLENBQUMifQ==