"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payload = void 0;
const express_1 = __importDefault(require("express"));
const crypto_1 = __importDefault(require("crypto"));
const logger_1 = __importDefault(require("./utilities/logger"));
const bindOperations_1 = __importDefault(require("./init/bindOperations"));
const bindRequestHandlers_1 = __importDefault(require("./init/bindRequestHandlers"));
const load_1 = __importDefault(require("./config/load"));
const authenticate_1 = __importDefault(require("./express/middleware/authenticate"));
const connect_1 = __importDefault(require("./mongoose/connect"));
const middleware_1 = __importDefault(require("./express/middleware"));
const admin_1 = __importDefault(require("./express/admin"));
const init_1 = __importDefault(require("./auth/init"));
const init_2 = __importDefault(require("./collections/init"));
const init_3 = __importDefault(require("./globals/init"));
const initPlayground_1 = __importDefault(require("./graphql/initPlayground"));
const static_1 = __importDefault(require("./express/static"));
const graphql_1 = __importDefault(require("./graphql"));
const bindResolvers_1 = __importDefault(require("./graphql/bindResolvers"));
const build_1 = __importDefault(require("./email/build"));
const identifyAPI_1 = __importDefault(require("./express/middleware/identifyAPI"));
const errorHandler_1 = __importDefault(require("./express/middleware/errorHandler"));
const performFieldOperations_1 = __importDefault(require("./fields/performFieldOperations"));
const local_1 = __importDefault(require("./collections/operations/local"));
const local_2 = __importDefault(require("./globals/operations/local"));
const crypto_2 = require("./auth/crypto");
require('isomorphic-fetch');
/**
 * @description Payload
 */
class Payload {
    constructor() {
        this.collections = [];
        this.logger = logger_1.default();
        this.encrypt = crypto_2.encrypt;
        this.decrypt = crypto_2.decrypt;
        this.sendEmail = async (message) => {
            const email = await this.email;
            const result = email.transport.sendMail(message);
            return result;
        };
        this.getMockEmailCredentials = async () => {
            const email = await this.email;
            return email.account;
        };
        this.getAdminURL = () => `${this.config.serverURL}${this.config.routes.admin}`;
        this.getAPIURL = () => `${this.config.serverURL}${this.config.routes.api}`;
        /**
         * @description Performs create operation
         * @param options
         * @returns created document
         */
        this.create = async (options) => {
            let { create } = local_1.default;
            create = create.bind(this);
            return create(options);
        };
        /**
         * @description Find documents with criteria
         * @param options
         * @returns documents satisfying query
         */
        this.find = async (options) => {
            let { find } = local_1.default;
            find = find.bind(this);
            return find(options);
        };
        this.findGlobal = async (options) => {
            let { findOne } = local_2.default;
            findOne = findOne.bind(this);
            return findOne(options);
        };
        this.updateGlobal = async (options) => {
            let { update } = local_2.default;
            update = update.bind(this);
            return update(options);
        };
        /**
         * @description Find document by ID
         * @param options
         * @returns document with specified ID
         */
        this.findByID = async (options) => {
            let { findByID } = local_1.default;
            findByID = findByID.bind(this);
            return findByID(options);
        };
        /**
         * @description Update document
         * @param options
         * @returns Updated document
         */
        this.update = async (options) => {
            let { update } = local_1.default;
            update = update.bind(this);
            return update(options);
        };
        this.delete = async (options) => {
            let { localDelete: deleteOperation } = local_1.default;
            deleteOperation = deleteOperation.bind(this);
            return deleteOperation(options);
        };
        this.login = async (options) => {
            let { login } = local_1.default.auth;
            login = login.bind(this);
            return login(options);
        };
        this.forgotPassword = async (options) => {
            let { forgotPassword } = local_1.default.auth;
            forgotPassword = forgotPassword.bind(this);
            return forgotPassword(options);
        };
        this.resetPassword = async (options) => {
            let { resetPassword } = local_1.default.auth;
            resetPassword = resetPassword.bind(this);
            return resetPassword(options);
        };
        this.unlock = async (options) => {
            let { unlock } = local_1.default.auth;
            unlock = unlock.bind(this);
            return unlock(options);
        };
        this.verifyEmail = async (options) => {
            let { verifyEmail } = local_1.default.auth;
            verifyEmail = verifyEmail.bind(this);
            return verifyEmail(options);
        };
    }
    /**
     * @description Initializes Payload
     * @param options
     */
    init(options) {
        this.logger.info('Starting Payload...');
        if (!options.secret) {
            throw new Error('Error: missing secret key. A secret key is needed to secure Payload.');
        }
        if (!options.mongoURL) {
            throw new Error('Error: missing MongoDB connection URL.');
        }
        this.license = options.license;
        this.emailOptions = { ...(options.email) };
        this.secret = crypto_1.default
            .createHash('sha256')
            .update(options.secret)
            .digest('hex')
            .slice(0, 32);
        this.mongoURL = options.mongoURL;
        this.local = options.local;
        this.config = load_1.default();
        bindOperations_1.default(this);
        bindRequestHandlers_1.default(this);
        bindResolvers_1.default(this);
        this.performFieldOperations = performFieldOperations_1.default.bind(this);
        // If not initializing locally, scaffold router
        if (!this.local) {
            this.router = express_1.default.Router();
            this.router.use(...middleware_1.default(this));
            init_1.default(this);
        }
        // Configure email service
        this.email = build_1.default(this.emailOptions);
        // Initialize collections & globals
        init_2.default(this);
        init_3.default(this);
        // Connect to database
        connect_1.default(this.mongoURL);
        // If not initializing locally, set up HTTP routing
        if (!this.local) {
            options.express.use((req, res, next) => {
                req.payload = this;
                next();
            });
            this.express = options.express;
            if (this.config.rateLimit.trustProxy) {
                this.express.set('trust proxy', 1);
            }
            admin_1.default(this);
            this.router.get('/access', this.requestHandlers.collections.auth.access);
            const graphQLHandler = new graphql_1.default(this);
            if (!this.config.graphQL.disable) {
                this.router.use(this.config.routes.graphQL, identifyAPI_1.default('GraphQL'), (req, res) => graphQLHandler.init(req, res)(req, res));
                initPlayground_1.default(this);
            }
            // Bind router to API
            this.express.use(this.config.routes.api, this.router);
            // Enable static routes for all collections permitting upload
            static_1.default(this);
            this.errorHandler = errorHandler_1.default(this.config, this.logger);
            this.router.use(this.errorHandler);
            this.authenticate = authenticate_1.default(this.config);
        }
        if (typeof options.onInit === 'function')
            options.onInit(this);
    }
}
exports.Payload = Payload;
const payload = new Payload();
exports.default = payload;
module.exports = payload;
//# sourceMappingURL=data:application/json;base64,