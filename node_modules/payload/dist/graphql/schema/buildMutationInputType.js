"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-use-before-define */
const graphql_1 = require("graphql");
const graphql_type_json_1 = require("graphql-type-json");
const withNullableType_1 = __importDefault(require("./withNullableType"));
const formatName_1 = __importDefault(require("../utilities/formatName"));
const combineParentName_1 = __importDefault(require("../utilities/combineParentName"));
function buildMutationInputType(name, fields, parentName, forceNullable = false) {
    const fieldToSchemaMap = {
        number: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLFloat, forceNullable) }),
        text: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        email: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        textarea: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        richText: (field) => ({ type: withNullableType_1.default(field, graphql_type_json_1.GraphQLJSON, forceNullable) }),
        code: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        date: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        upload: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        'rich-text': (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        html: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        radio: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        checkbox: () => ({ type: graphql_1.GraphQLBoolean }),
        select: (field) => {
            const formattedName = `${combineParentName_1.default(parentName, field.name)}_MutationInput`;
            let type = new graphql_1.GraphQLEnumType({
                name: formattedName,
                values: field.options.reduce((values, option) => {
                    if (typeof option === 'object' && option.value) {
                        return {
                            ...values,
                            [formatName_1.default(option.value)]: {
                                value: option.value,
                            },
                        };
                    }
                    if (typeof option === 'string') {
                        return {
                            ...values,
                            [option]: {
                                value: option,
                            },
                        };
                    }
                    return values;
                }, {}),
            });
            type = field.hasMany ? new graphql_1.GraphQLList(type) : type;
            type = withNullableType_1.default(field, type, forceNullable);
            return { type };
        },
        relationship: (field) => {
            const { relationTo } = field;
            let type = graphql_1.GraphQLString;
            if (Array.isArray(relationTo)) {
                const fullName = `${combineParentName_1.default(parentName, field.label)}RelationshipInput`;
                type = new graphql_1.GraphQLInputObjectType({
                    name: fullName,
                    fields: {
                        relationTo: {
                            type: new graphql_1.GraphQLEnumType({
                                name: `${fullName}RelationTo`,
                                values: relationTo.reduce((values, option) => ({
                                    ...values,
                                    [formatName_1.default(option)]: {
                                        value: option,
                                    },
                                }), {}),
                            }),
                        },
                        value: { type: graphql_1.GraphQLString },
                    },
                });
            }
            return { type: field.hasMany ? new graphql_1.GraphQLList(type) : type };
        },
        array: (field) => {
            const fullName = combineParentName_1.default(parentName, field.label);
            let type = buildMutationInputType(fullName, field.fields, fullName);
            type = new graphql_1.GraphQLList(withNullableType_1.default(field, type, forceNullable));
            return { type };
        },
        group: (field) => {
            const requiresAtLeastOneField = field.fields.some((subField) => (subField.required && !subField.localized));
            const fullName = combineParentName_1.default(parentName, field.label);
            let type = buildMutationInputType(fullName, field.fields, fullName);
            if (requiresAtLeastOneField)
                type = new graphql_1.GraphQLNonNull(type);
            return { type };
        },
        blocks: () => ({ type: graphql_type_json_1.GraphQLJSON }),
        row: (field) => field.fields.reduce((acc, rowField) => {
            const getFieldSchema = fieldToSchemaMap[rowField.type];
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema(rowField);
                return [
                    ...acc,
                    fieldSchema,
                ];
            }
            return null;
        }, []),
    };
    const fieldTypes = fields.reduce((schema, field) => {
        if (!field.hidden) {
            const getFieldSchema = fieldToSchemaMap[field.type];
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema(field);
                if (Array.isArray(fieldSchema)) {
                    return fieldSchema.reduce((acc, subField, i) => ({
                        ...acc,
                        [field.fields[i].name]: subField,
                    }), schema);
                }
                return {
                    ...schema,
                    [field.name]: fieldSchema,
                };
            }
        }
        return schema;
    }, {});
    const fieldName = formatName_1.default(name);
    return new graphql_1.GraphQLInputObjectType({
        name: `mutation${fieldName}Input`,
        fields: {
            ...fieldTypes,
        },
    });
}
exports.default = buildMutationInputType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRNdXRhdGlvbklucHV0VHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3NjaGVtYS9idWlsZE11dGF0aW9uSW5wdXRUeXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQXlDO0FBQ3pDLHFDQVVpQjtBQUNqQix5REFBZ0Q7QUFDaEQsMEVBQWtEO0FBQ2xELHlFQUFpRDtBQUNqRCx1RkFBK0Q7QUFHL0QsU0FBUyxzQkFBc0IsQ0FBQyxJQUFZLEVBQUUsTUFBZSxFQUFFLFVBQWtCLEVBQUUsYUFBYSxHQUFHLEtBQUs7SUFDdEcsTUFBTSxnQkFBZ0IsR0FBRztRQUN2QixNQUFNLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQWdCLENBQUMsS0FBSyxFQUFFLHNCQUFZLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUMxRixJQUFJLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQWdCLENBQUMsS0FBSyxFQUFFLHVCQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUN6RixLQUFLLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQWdCLENBQUMsS0FBSyxFQUFFLHVCQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUMxRixRQUFRLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQWdCLENBQUMsS0FBSyxFQUFFLHVCQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUM3RixRQUFRLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsMEJBQWdCLENBQUMsS0FBSyxFQUFFLCtCQUFXLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQztR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